<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-06T15:22:31.834Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式</title>
    <link href="http://example.com/2021/12/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2021/12/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-11-30T16:02:17.000Z</published>
    <updated>2021-12-06T15:22:31.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java设计模式学习"><a href="#Java设计模式学习" class="headerlink" title="Java设计模式学习"></a>Java设计模式学习</h2><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式严格意义上来说，并不属于设计模式中的一种，不过这里还是简单记录下。</p><p><strong>定义</strong>：由一个工厂对象决定创建出哪一种类型实例。客户端只需传入工厂类的参数，无心关心创建过程。</p><p><strong>优点</strong>：具体产品从客户端代码中抽离出来，解耦。</p><p><strong>缺点</strong>：工厂类职责过重，增加新的类型时，得修改工程类得代码，违背开闭原则。</p><p>举例：新建Fruit水果抽象类，包含eat抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Fruit &#123;</span><br><span class="line"></span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实现类Apple：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Apple extends Fruit&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;吃🍎&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建创建Fruit的工厂类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class FruitFactory &#123;</span><br><span class="line"></span><br><span class="line">    public Fruit produce(String name) &#123;</span><br><span class="line">        if (&quot;apple&quot;.equals(name)) &#123;</span><br><span class="line">            return new Apple();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建个客户端测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitFactory factory &#x3D; new FruitFactory();</span><br><span class="line">        Fruit fruit &#x3D; factory.produce(&quot;apple&quot;);</span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法，输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吃🍎</span><br></pre></td></tr></table></figure><p>可以看到，客户端Application并未依赖具体的水果类型，只关心FruitFactory的入参，这就是客户端和具体产品解耦的体现，UML图如下：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216103019.png" alt="QQ截图20191216103019.png"></p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>为了解决简单工厂模式的缺点，诞生了工厂方法模式（Factory method pattern）。</p><p><strong>定义</strong>：定义创建对象的接口，让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到了子类进行。</p><p><strong>优点</strong>：</p><ol><li>具体产品从客户端代码中抽离出来，解耦。</li><li>加入新的类型时，只需添加新的工厂方法（无需修改旧的工厂方法代码），符合开闭原则。</li></ol><p><strong>缺点</strong>：类的个数容易过多，增加复杂度。</p><p>举例：新建Fruit抽象类，包含eat抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Fruit &#123;</span><br><span class="line"></span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建FruitFactory抽象工厂，定义produceFruit抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public abstract class FruitFactory &#123;</span><br><span class="line"></span><br><span class="line">    public abstract Fruit produceFruit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建Fruit的实现类，Apple：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Apple extends Fruit &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;吃🍎&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建FruitFactory的实现类AppleFruitFactory，用于生产具体类型的水果 —— 苹果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AppleFruitFactory extends FruitFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Fruit produceFruit() &#123;</span><br><span class="line">        return new Apple();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建客户端Application测试一波：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitFactory factory &#x3D; new AppleFruitFactory();</span><br><span class="line">        Fruit fruit &#x3D; factory.produceFruit();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吃🍎</span><br></pre></td></tr></table></figure><p>现在要新增Banana类型的水果，只需要新增Banana类型的工厂类即可，无需修改现有的AppleFruitFactory代码，符合开闭原则。但是这种模式的缺点也显而易见，就是类的个数容易过多，增加复杂度。</p><p>上面例子UML图如下所示：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216105317.png" alt="QQ截图20191216105317.png"></p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式（Abstract factory pattern）提供了<strong>一系列</strong>相关或者相互依赖的对象的接口，关键字是“一系列”。</p><p><strong>优点</strong>：</p><ol><li>具体产品从客户端代码中抽离出来，解耦。</li><li>将一个系列的产品族统一到一起创建。</li></ol><p><strong>缺点</strong>：拓展新的功能困难，需要修改抽象工厂的接口；</p><p>综上所述，抽象工厂模式适合那些功能相对固定的产品族的创建。</p><p>举例：新建水果抽象类Fruit，包含buy抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Fruit &#123;</span><br><span class="line"></span><br><span class="line">    public abstract void buy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建价格抽象类Price，包含pay抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Price &#123;</span><br><span class="line"></span><br><span class="line">    public abstract void pay();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建水果创建工厂接口FruitFactory，包含获取水果和价格抽象方法（产品族的体现是，一组产品包含水果和对应的价格）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface FruitFactory &#123;</span><br><span class="line"></span><br><span class="line">    Fruit getFruit();</span><br><span class="line">    Price getPrice();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来开始创建🍎这个“产品族”。新建Fruit实现类AppleFruit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AppleFruit extends Fruit&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void buy() &#123;</span><br><span class="line">        System.out.println(&quot;购买🍎&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建对应的苹果价格实现ApplePrice：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class ApplePrice extends Price&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void pay() &#123;</span><br><span class="line">        System.out.println(&quot;🍎单价2元&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建客户端Application，测试一波：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitFactory factory &#x3D; new AppleFruitFactory();</span><br><span class="line">        factory.getFruit().buy();</span><br><span class="line">        factory.getPrice().pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">购买🍎</span><br><span class="line">🍎单价2元</span><br></pre></td></tr></table></figure><p>客户端只需要通过创建AppleFruitFactory就可以获得苹果这个产品族的所有内容，包括苹果对象，苹果价格。要新建🍌的产品族，只需要实现FruitFactory、Price和Fruit接口即可。这种模式的缺点和工厂方法差不多，就是类的个数容易过多，增加复杂度。</p><p>上面例子UML图如下所示：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216112922.png" alt="QQ截图20191216112922.png"></p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><p>建造者模式也称为生成器模式（Builder Pattern），将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。简单来说就是，相同的过程可以创建不同的产品。</p><p>将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p><p>简单来说就是，相同的过程可以创建不同的产品。</p><p>适用于：</p><ol><li>一个对象有非常复杂的内部结构（很多属性）</li><li>想将复杂对象的创建和使用分离。</li></ol><p><strong>优点</strong>：</p><ol><li>封装性好，创建和使用分离</li><li>拓展性好，建造类之间独立，一定程度上解耦。</li></ol><p><strong>缺点</strong>：</p><ol><li>产生多余的Builder对象；</li><li>产品内部发生变化，建造者需要更改，成本较大。</li></ol><p>举个例子：</p><p>新增商铺类Shop，包含名称，地点和类型属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class Shop &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private String location;</span><br><span class="line">    private String type;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Shop&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, location&#x3D;&#39;&quot; + location + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, type&#x3D;&#39;&quot; + type + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLocation() &#123;</span><br><span class="line">        return location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLocation(String location) &#123;</span><br><span class="line">        this.location &#x3D; location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getType() &#123;</span><br><span class="line">        return type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setType(String type) &#123;</span><br><span class="line">        this.type &#x3D; type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建Shop抽象生成器ShopBuilder：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public abstract class ShopBuilder &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private String location;</span><br><span class="line">    private String type;</span><br><span class="line"></span><br><span class="line">    public abstract void name(String name);</span><br><span class="line">    public abstract void location(String location);</span><br><span class="line">    public abstract void type(String type);</span><br><span class="line"></span><br><span class="line">    public abstract Shop build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含和Shop相同的属性及对应的抽象构建方法。</p><p>继续创建ShopBuilder的实现，水果店构造器FruitShopBuilder：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class FruitShopBuilder extends ShopBuilder&#123;</span><br><span class="line"></span><br><span class="line">    private Shop shop &#x3D; new Shop();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void name(String name) &#123;</span><br><span class="line">        this.shop.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void location(String location) &#123;</span><br><span class="line">        this.shop.setLocation(location);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void type(String type) &#123;</span><br><span class="line">        this.shop.setType(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Shop build() &#123;</span><br><span class="line">        return shop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建个经销商类Dealer，用于通过ShopBuilder构建具体的商店：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Dealer &#123;</span><br><span class="line"></span><br><span class="line">    private ShopBuilder builder;</span><br><span class="line"></span><br><span class="line">    public void setBuilder(ShopBuilder builder) &#123;</span><br><span class="line">        this.builder &#x3D; builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Shop build(String name, String location, String type) &#123;</span><br><span class="line">        this.builder.name(name);</span><br><span class="line">        this.builder.location(location);</span><br><span class="line">        this.builder.type(type);</span><br><span class="line">        return builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建个客户端Application测试一波：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ShopBuilder builder &#x3D; new FruitShopBuilder();</span><br><span class="line">        Dealer dealer &#x3D; new Dealer();</span><br><span class="line">        dealer.setBuilder(builder);</span><br><span class="line"></span><br><span class="line">        Shop shop &#x3D; dealer.build(&quot;XX水果店&quot;, &quot;福州市XX区XX街XX号&quot;, &quot;水果经营&quot;);</span><br><span class="line">        System.out.println(shop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shop&#123;name&#x3D;&#39;XX水果店&#39;, location&#x3D;&#39;福州市XX区XX街XX号&#39;, type&#x3D;&#39;水果经营&#39;&#125;</span><br></pre></td></tr></table></figure><p>这个例子是典型的建造者模式，UML图如下所示：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216162813.png" alt="QQ截图20191216162813.png"></p><p>其实建造者模式更为常用的例子是下面这个：</p><p>创建一个店铺类Shop，Shop里包含构造该Shop的内部类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class Shop &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private String location;</span><br><span class="line">    private String type;</span><br><span class="line"></span><br><span class="line">    public Shop(ShopBuilder builder) &#123;</span><br><span class="line">        this.name &#x3D; builder.name;</span><br><span class="line">        this.location &#x3D; builder.location;</span><br><span class="line">        this.type &#x3D; builder.type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Shop&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, location&#x3D;&#39;&quot; + location + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, type&#x3D;&#39;&quot; + type + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class ShopBuilder &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private String location;</span><br><span class="line">        private String type;</span><br><span class="line"></span><br><span class="line">        public ShopBuilder name(String name) &#123;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public ShopBuilder location(String location) &#123;</span><br><span class="line">            this.location &#x3D; location;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public ShopBuilder type(String type) &#123;</span><br><span class="line">            this.type &#x3D; type;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Shop build() &#123;</span><br><span class="line">            return new Shop(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在客户端构建Shop只需：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Shop shop &#x3D; new Shop.ShopBuilder()</span><br><span class="line">                .name(&quot;XX水果店&quot;)</span><br><span class="line">                .location(&quot;福州市XX区XX街XX号&quot;)</span><br><span class="line">                .type(&quot;水果经营&quot;)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(shop);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种用法和Lombok的@Builder注解效果是一样的。</p><p>这个例子的UML图：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216163308.png" alt="QQ截图20191216163308.png"></p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式目的是为了一个类只有一个实例。</p><p>优点：</p><ol><li>内存中只有一个实例，减少了内存开销；</li><li>可以避免对资源的多重占用；</li><li>设置全局访问点，严格控制访问。</li></ol><p>缺点：</p><ol><li>没有接口，拓展困难。</li></ol><h4 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h4><p>懒汉模式下的单例写法是最简单的，但它是线程不安全的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class LazySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static LazySingleton lazySingleton &#x3D; null;</span><br><span class="line"></span><br><span class="line">    private LazySingleton() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazySingleton getInstance() &#123;</span><br><span class="line">        if (lazySingleton &#x3D;&#x3D; null) &#123;</span><br><span class="line">            lazySingleton &#x3D; new LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可加同步锁解决线程安全问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class LazySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static LazySingleton lazySingleton &#x3D; null;</span><br><span class="line"></span><br><span class="line">    private LazySingleton() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazySingleton getInstance() &#123;</span><br><span class="line">        synchronized (LazySingleton.class) &#123;</span><br><span class="line">            if (lazySingleton &#x3D;&#x3D; null) &#123;</span><br><span class="line">                lazySingleton &#x3D; new LazySingleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是同步锁锁的是整个类，比较消耗资源，并且即使运行内存中已经存在LazySingleton，调用其getInstance还是会上锁，所以这种写法也不是很好。</p><h4 id="双重同步锁单例模式"><a href="#双重同步锁单例模式" class="headerlink" title="双重同步锁单例模式"></a>双重同步锁单例模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class LazyDoubleCheckSingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static LazyDoubleCheckSingleton instance &#x3D; null;</span><br><span class="line"></span><br><span class="line">    private LazyDoubleCheckSingleton() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazyDoubleCheckSingleton getInstance() &#123;</span><br><span class="line">        if (instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">            synchronized (LazyDoubleCheckSingleton.class) &#123;</span><br><span class="line">                if (instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    instance &#x3D; new LazyDoubleCheckSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子虽然加了同步锁，但它还是线程不安全的。虽然上面的例子不会出现多次初始化LazyDoubleCheckSingleton实例的情况，但是由于指令重排的原因，某些线程可能会获取到空对象，后续对该对象的操作将触发空指针异常。</p><p>要修复这个问题，只需要阻止指令重排即可，所以可以给instance属性加上volatile关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class LazyDoubleCheckSingleton &#123;</span><br><span class="line"></span><br><span class="line">    private volatile static LazyDoubleCheckSingleton instance &#x3D; null;</span><br><span class="line"></span><br><span class="line">    private LazyDoubleCheckSingleton() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazyDoubleCheckSingleton getInstance() &#123;</span><br><span class="line">        if (instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">            synchronized (LazyDoubleCheckSingleton.class) &#123;</span><br><span class="line">                if (instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    instance &#x3D; new LazyDoubleCheckSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关博文：<a href="https://mrbird.cc/volatile.html">深入理解volatile关键字</a>。</p><p>上面这种写法是不但确保了线程安全，并且当LazyDoubleCheckSingleton实例创建好后，后续再调用其getInstance方法不会上锁。</p><h4 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h4><p>看例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class StaticInnerClassSingleton &#123;</span><br><span class="line"></span><br><span class="line">    private StaticInnerClassSingleton() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class InnerClass &#123;</span><br><span class="line">        private static StaticInnerClassSingleton instance &#x3D; new StaticInnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static StaticInnerClassSingleton getInstance() &#123;</span><br><span class="line">        return InnerClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这个例子是可行的呢？主要有两个原因：</p><ol><li>JVM在类的初始化阶段会加Class对象初始化同步锁，同步多个线程对该类的初始化操作；</li><li>静态内部类InnerClass的静态成员变量instance在方法区中只会有一个实例。</li></ol><p>在Java规范中，当以下这些情况首次发生时，A类将会立刻被初始化：</p><ol><li>A类型实例被创建；</li><li>A类中声明的静态方法被调用；</li><li>A类中的静态成员变量被赋值；</li><li>A类中的静态成员被使用（非常量）；</li></ol><h4 id="饿汉单例模式"><a href="#饿汉单例模式" class="headerlink" title="饿汉单例模式"></a>饿汉单例模式</h4><p>“饿汉”意指在类加载的时候就初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class HungrySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private final static HungrySingleton instance &#x3D; new HungrySingleton();</span><br><span class="line"></span><br><span class="line">    private HungrySingleton() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static HungrySingleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式在类加载的时候就完成了初始化，所以并不存在线程安全性问题；但由于不是懒加载，饿汉模式不管需不需要用到实例都要去创建实例，如果创建了不使用，则会造成内存浪费。</p><h4 id="序列化破坏单例模式"><a href="#序列化破坏单例模式" class="headerlink" title="序列化破坏单例模式"></a>序列化破坏单例模式</h4><p>前面的单例例子在实现序列化接口后都能被序列化的方式破坏，比如HungrySingleton，让其实现序列化接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class HungrySingleton implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID &#x3D; -8073288969651806838L;</span><br><span class="line"></span><br><span class="line">    private final static HungrySingleton instance &#x3D; new HungrySingleton();</span><br><span class="line"></span><br><span class="line">    private HungrySingleton() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static HungrySingleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建Application测试一下如何破坏：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        &#x2F;&#x2F; 演示序列化破坏单例</span><br><span class="line">        HungrySingleton instance &#x3D; HungrySingleton.getInstance();</span><br><span class="line">        ObjectOutputStream outputStream &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;file&quot;));</span><br><span class="line">        outputStream.writeObject(instance);</span><br><span class="line"></span><br><span class="line">        ObjectInputStream inputStream &#x3D; new ObjectInputStream(new FileInputStream(&quot;file&quot;));</span><br><span class="line">        HungrySingleton newInstance &#x3D; (HungrySingleton) inputStream.readObject();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(newInstance);</span><br><span class="line">        System.out.println(instance &#x3D;&#x3D; newInstance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cc.mrbird.design.pattern.creational.singleton.HungrySingleton@7f31245a</span><br><span class="line">cc.mrbird.design.pattern.creational.singleton.HungrySingleton@6d03e736</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>可以看到，虽然是单例模式，但却成功创建出了两个不一样的实例，单例遭到了破坏。</p><p>要让反序列化后的对象和序列化前的对象是同一个对象的话，可以在HungrySingleton里加上readResolve方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class HungrySingleton implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID &#x3D; -8073288969651806838L;</span><br><span class="line"></span><br><span class="line">    private final static HungrySingleton instance &#x3D; new HungrySingleton();</span><br><span class="line"></span><br><span class="line">    private HungrySingleton() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static HungrySingleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 新增</span><br><span class="line">    private Object readResolve() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行Application的main方法后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cc.mrbird.design.pattern.creational.singleton.HungrySingleton@7f31245a</span><br><span class="line">cc.mrbird.design.pattern.creational.singleton.HungrySingleton@7f31245a</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>可以看到，这种方式最终反序列化出来的对象和序列化对象是同一个对象。但这种方式反序列化过程内部还是会重新创建HungrySingleton实例，只不过因为HungrySingleton类定义了readResolve方法（方法内部返回instance引用），反序列化过程会判断目标类是否定义了readResolve该方法，是的话则通过反射调用该方法。</p><h4 id="反射破坏单例模式"><a href="#反射破坏单例模式" class="headerlink" title="反射破坏单例模式"></a>反射破坏单例模式</h4><p>除了序列化能破坏单例外，反射也可以，举个反射破坏HungrySingleton的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        HungrySingleton instance &#x3D; HungrySingleton.getInstance();</span><br><span class="line">        &#x2F;&#x2F; 反射创建实例</span><br><span class="line">        Class&lt;HungrySingleton&gt; c &#x3D; HungrySingleton.class;</span><br><span class="line">        &#x2F;&#x2F; 获取构造器</span><br><span class="line">        Constructor&lt;HungrySingleton&gt; constructor &#x3D; c.getDeclaredConstructor();</span><br><span class="line">        &#x2F;&#x2F; 打开构造器权限</span><br><span class="line">        constructor.setAccessible(true);</span><br><span class="line">        HungrySingleton newInstance &#x3D; constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(newInstance);</span><br><span class="line">        System.out.println(instance &#x3D;&#x3D; newInstance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cc.mrbird.design.pattern.creational.singleton.HungrySingleton@1b6d3586</span><br><span class="line">cc.mrbird.design.pattern.creational.singleton.HungrySingleton@4554617c</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>可以看到，我们通过反射破坏了私有构造器权限，成功创建了新的实例。</p><p>对于这种情况，饿汉模式下的例子可以在构造器中添加判断逻辑来防御（懒汉模式的就没有办法了），比如修改HungrySingleton的代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class HungrySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private final static HungrySingleton instance &#x3D; new HungrySingleton();</span><br><span class="line"></span><br><span class="line">    private HungrySingleton() &#123;</span><br><span class="line">        if (instance !&#x3D; null) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;forbidden&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static HungrySingleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行Application的main方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.reflect.InvocationTargetException</span><br><span class="line">    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">    at cc.mrbird.design.pattern.creational.singleton.Application.main(Application.java:33)</span><br><span class="line">Caused by: java.lang.RuntimeException: forbidden</span><br><span class="line">    at cc.mrbird.design.pattern.creational.singleton.HungrySingleton.&lt;init&gt;(HungrySingleton.java:16)</span><br><span class="line">    ... 5 more</span><br></pre></td></tr></table></figure><h4 id="枚举单例模式"><a href="#枚举单例模式" class="headerlink" title="枚举单例模式"></a>枚举单例模式</h4><p>枚举单例模式是推荐的单例模式，它不仅可以防御序列化攻击，也可以防御反射攻击。举个枚举单例模式的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public enum EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    private Object data;</span><br><span class="line"></span><br><span class="line">    public Object getData() &#123;</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setData(Object data) &#123;</span><br><span class="line">        this.data &#x3D; data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static EnumSingleton getInstance()&#123;</span><br><span class="line">        return INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证下是否是单例的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        EnumSingleton instance &#x3D; EnumSingleton.getInstance();</span><br><span class="line">        instance.setData(new Object());</span><br><span class="line">        EnumSingleton newInstance &#x3D; EnumSingleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(newInstance);</span><br><span class="line">        System.out.println(instance.getData());</span><br><span class="line">        System.out.println(newInstance.getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTANCE</span><br><span class="line">INSTANCE</span><br><span class="line">java.lang.Object@1b6d3586</span><br><span class="line">java.lang.Object@1b6d3586</span><br></pre></td></tr></table></figure><p>测试下序列化攻击：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        EnumSingleton instance &#x3D; EnumSingleton.getInstance();</span><br><span class="line">        instance.setData(new Object());</span><br><span class="line">        ObjectOutputStream outputStream &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;file&quot;));</span><br><span class="line">        outputStream.writeObject(instance);</span><br><span class="line">       </span><br><span class="line">        ObjectInputStream inputStream &#x3D; new ObjectInputStream(new FileInputStream(&quot;file&quot;));</span><br><span class="line">        EnumSingleton newInstance &#x3D; (EnumSingleton) inputStream.readObject();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(newInstance);</span><br><span class="line">        System.out.println(instance &#x3D;&#x3D; newInstance);</span><br><span class="line"></span><br><span class="line">        System.out.println(instance.getData());</span><br><span class="line">        System.out.println(newInstance.getData());</span><br><span class="line">        System.out.println(instance.getData() &#x3D;&#x3D; newInstance.getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTANCE</span><br><span class="line">INSTANCE</span><br><span class="line">true</span><br><span class="line">java.lang.Object@568db2f2</span><br><span class="line">java.lang.Object@568db2f2</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>可以看到序列化和反序列化后的对象是同一个。</p><p>原理：跟踪ObjectInputStream#readObject源码，其中当反编译对象为枚举类型时，将调用readEnum方法：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191217155448.png" alt="QQ截图20191217155448.png"></p><p>name为枚举类里的枚举常量，对于线程来说它是唯一的，存在方法区，所以通过<code>Enum.valueOf((Class)cl, name)</code>方法得到的枚举对象都是同一个。</p><p>再测试一下反射攻击：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        EnumSingleton instance &#x3D; EnumSingleton.getInstance();</span><br><span class="line"></span><br><span class="line">        Class&lt;EnumSingleton&gt; c &#x3D; EnumSingleton.class;</span><br><span class="line">        &#x2F;&#x2F; 枚举类只包含一个(String,int)类型构造器</span><br><span class="line">        Constructor&lt;EnumSingleton&gt; constructor &#x3D; c.getDeclaredConstructor(String.class, int.class);</span><br><span class="line">        constructor.setAccessible(true);</span><br><span class="line">        EnumSingleton newInstance &#x3D; constructor.newInstance(&quot;hello&quot;, 1);</span><br><span class="line"></span><br><span class="line">        System.out.println(instance &#x3D;&#x3D; newInstance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Cannot reflectively create enum objects</span><br><span class="line">    at java.lang.reflect.Constructor.newInstance(Constructor.java:417)</span><br><span class="line">    at cc.mrbird.design.pattern.creational.singleton.Application.main(Application.java:71)</span><br></pre></td></tr></table></figure><p>可以看到抛异常了，查看Constructor类的417行代码可以发现原因：<img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191217160647.png" alt="QQ截图20191217160647.png"></p><p>Java禁止通过反射创建枚举对象。</p><p>正是因为枚举类型拥有这些天然的优势，所以用它创建单例是不错的选择，这也是Effective Java推荐的方式。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型实例指定创建对象的种类，通过拷贝这些原型创建新的对象。</p><p>适用于：</p><ol><li>类初始化消耗较多资源；</li><li>循环体中生产大量对象的时候。</li></ol><p>优点：</p><ol><li>原型模式性能比直接new一个对象性能好；</li><li>简化创建对象过程。</li></ol><p>缺点：</p><ol><li>对象必须重写Object克隆方法；</li><li>复杂对象的克隆方法写起来较麻烦（深克隆、浅克隆）</li></ol><p>举例：新建一个学生类Student，实现克隆接口，并重写Object的克隆方法（因为都是简单属性，所以浅克隆即可）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Student implements Cloneable &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return super.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Application中测试一波：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line">        Student student &#x3D; new Student();</span><br><span class="line">        ArrayList&lt;Student&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class="line">            Student s &#x3D; (Student) student.clone();</span><br><span class="line">            s.setName(&quot;学生&quot; + i);</span><br><span class="line">            s.setAge(20 + i);</span><br><span class="line">            list.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Student&#123;name&#x3D;&#39;学生0&#39;, age&#x3D;20&#125;, Student&#123;name&#x3D;&#39;学生1&#39;, age&#x3D;21&#125;, Student&#123;name&#x3D;&#39;学生2&#39;, age&#x3D;22&#125;]</span><br></pre></td></tr></table></figure><p>这种方式会比直接在循环中创建Student性能好。</p><p>当对象包含引用类型属性时，需要使用深克隆，比如Student包含Date属性时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class Student implements Cloneable &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private Date birthday;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getBirthday() &#123;</span><br><span class="line">        return birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBirthday(Date birthday) &#123;</span><br><span class="line">        this.birthday &#x3D; birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &quot;, birthday&#x3D;&quot; + birthday +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        Student student &#x3D; (Student) super.clone();</span><br><span class="line">        &#x2F;&#x2F; 引用类型深克隆</span><br><span class="line">        Date birthday &#x3D; (Date) student.getBirthday().clone();</span><br><span class="line">        student.setBirthday(birthday);</span><br><span class="line">        return student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，克隆会破坏实现了Cloneable接口的单例对象。</p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><p>外观模式又叫门面模式，提供了统一得接口，用来访问子系统中的一群接口。</p><p>适用于：</p><ol><li>子系统越来越复杂，增加外观模式提供简单接口调用；</li><li>构建多层系统结构，利用外观对象作为每层的入口，简化层间调用。</li></ol><p>优点：</p><ol><li>简化了调用过程，无需了解深入子系统；</li><li>减低耦合度；</li><li>更好的层次划分；</li><li>符合迪米特法则。</li></ol><p>缺点：</p><ol><li>增加子系统，拓展子系统行为容易引入风险；</li><li>不符合开闭原则。</li></ol><p>举个订外卖的例子。</p><p>创建一个外卖实体类Takeaway：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Takeaway &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订外卖过程一般分为三个步骤：下单、支付和配送，所以我们创建三个Service对应这三个过程。新建下单服务OrderService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class OrderService &#123;</span><br><span class="line"></span><br><span class="line">    public boolean placeAnOrder(Takeaway takeaway) &#123;</span><br><span class="line">        System.out.println(takeaway.getName() + &quot;下单成功&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建支付服务PayService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class PayService &#123;</span><br><span class="line"></span><br><span class="line">    public boolean pay(Takeaway takeaway) &#123;</span><br><span class="line">        System.out.println(&quot;商品&quot; + takeaway.getName() + &quot;支付成功&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建配送服务DeliveryService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class DeliveryService &#123;</span><br><span class="line"></span><br><span class="line">    public void delivery(Takeaway takeaway) &#123;</span><br><span class="line">        System.out.println(takeaway.getName() + &quot;已由骑手XX接单，订单派送中&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于外观模式法则，我们需要创建一个Service来聚合这三个服务，客户端只需要和这个Service交互即可。新建外卖服务TakeawayService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class TakeawayService &#123;</span><br><span class="line"></span><br><span class="line">    private OrderService orderService &#x3D; new OrderService();</span><br><span class="line">    private PayService payService &#x3D; new PayService();</span><br><span class="line">    private DeliveryService deliveryService &#x3D; new DeliveryService();</span><br><span class="line"></span><br><span class="line">    public void takeOrder(Takeaway takeaway) &#123;</span><br><span class="line">        if (orderService.placeAnOrder(takeaway)) &#123;</span><br><span class="line">            if (payService.pay(takeaway)) &#123;</span><br><span class="line">                deliveryService.delivery(takeaway);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建个客户端测试一波：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Takeaway takeaway &#x3D; new Takeaway();</span><br><span class="line">        takeaway.setName(&quot;泡椒🐸&quot;);</span><br><span class="line"></span><br><span class="line">        TakeawayService takeawayService &#x3D; new TakeawayService();</span><br><span class="line">        takeawayService.takeOrder(takeaway);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，客户端只需要调用TakeawayService即可，无需关系内部具体经历了多少个步骤，运行main方法输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">泡椒🐸下单成功</span><br><span class="line">商品泡椒🐸支付成功</span><br><span class="line">泡椒🐸已由骑手XX接单，订单派送中</span><br></pre></td></tr></table></figure><p>该例子的UML图如下所示：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191218151629.png" alt="QQ截图20191218151629.png"></p><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案。</p><p>适用于：</p><ol><li>拓展一个类的功能；</li><li>动态给对象添加功能，并且动态撤销。</li></ol><p>优点：</p><ol><li>继承的有力补充，不改变原有对象的情况下给对象拓展功能；</li><li>通过使用不同的装饰类、不同的组合方式，实现不同的效果。</li><li>符合开闭原则。</li></ol><p>缺点：</p><ol><li>增加程序复杂性；</li></ol><p>举个水果沙拉的例子。</p><p>比如在点水果沙拉外卖时，可以往水果沙拉里加各种水果，价格也会相应的调整，要让程序支持不同水果自由组合，并计算相应的价格，则可以使用装饰者模式来完成。</p><p>定义一个抽象的水果沙拉类AbstractFruitSalad：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractFruitSalad &#123;</span><br><span class="line">    public abstract String remark();</span><br><span class="line">    public abstract int price();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含备注和价格抽象方法。</p><p>接着创建一个抽象的装饰器AbstractDecorator（关键点，继承抽象水果沙拉类）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class AbstractDecorator extends AbstractFruitSalad&#123;</span><br><span class="line"></span><br><span class="line">    private AbstractFruitSalad fruitSalad;</span><br><span class="line"></span><br><span class="line">    public AbstractDecorator(AbstractFruitSalad fruitSalad)&#123;</span><br><span class="line">        this.fruitSalad &#x3D; fruitSalad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String remark() &#123;</span><br><span class="line">        return fruitSalad.remark();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int price() &#123;</span><br><span class="line">        return fruitSalad.price();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建具体的水果沙拉类FruitSalad：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class FruitSalad extends AbstractFruitSalad&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String remark() &#123;</span><br><span class="line">        return &quot;水果🥗（标准）\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int price() &#123;</span><br><span class="line">        return 9;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该沙拉是标准的水果沙拉，价格是9元。</p><p>如果我们的水果沙拉还允许客户添加猕猴桃和西瓜，那么我们可以添加两个新的装饰器。添加猕猴桃装饰器KiwiDecorator：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class KiwiDecorator extends AbstractDecorator &#123;</span><br><span class="line"></span><br><span class="line">    public KiwiDecorator(AbstractFruitSalad fruitSalad) &#123;</span><br><span class="line">        super(fruitSalad);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String remark() &#123;</span><br><span class="line">        return super.remark() + &quot;加份🥝切\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int price() &#123;</span><br><span class="line">        return super.price() + 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，加一份猕猴桃需要在原有基础上加2元。</p><p>接着继续创建西瓜装饰器WaterMelonDecorator：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class WaterMelonDecorator extends AbstractDecorator &#123;</span><br><span class="line"></span><br><span class="line">    public WaterMelonDecorator(AbstractFruitSalad fruitSalad) &#123;</span><br><span class="line">        super(fruitSalad);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String remark() &#123;</span><br><span class="line">        return super.remark() + &quot;加份🍉切\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int price() &#123;</span><br><span class="line">        return super.price() + 3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后创建客户端Application测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 点了份水果沙拉，并加了两份🥝和一份🍉，看看最终价格是多少？</span><br><span class="line">        AbstractFruitSalad fruitSalad &#x3D; new FruitSalad();</span><br><span class="line">        fruitSalad &#x3D; new KiwiDecorator(fruitSalad);</span><br><span class="line">        fruitSalad &#x3D; new KiwiDecorator(fruitSalad);</span><br><span class="line">        fruitSalad &#x3D; new WaterMelonDecorator(fruitSalad);</span><br><span class="line"></span><br><span class="line">        System.out.println(fruitSalad.remark() + &quot;价格是：&quot; + fruitSalad.price());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的写法也可以改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 点了份水果沙拉，并加了两份🥝和一份🍉，看看最终价格是多少？</span><br><span class="line">        AbstractFruitSalad fruitSalad &#x3D; new FruitSalad();</span><br><span class="line">        fruitSalad &#x3D; new WaterMelonDecorator(new KiwiDecorator(new KiwiDecorator(fruitSalad)));</span><br><span class="line"></span><br><span class="line">        System.out.println(fruitSalad.remark() + &quot;价格是：&quot; + fruitSalad.price());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">水果🥗（标准）</span><br><span class="line">加份🥝切</span><br><span class="line">加份🥝切</span><br><span class="line">加份🍉切</span><br><span class="line">价格是：16</span><br></pre></td></tr></table></figure><p>通过不同的装饰器自由组合，我们可以灵活的组装出各式各样的水果沙拉，这正是装饰者模式的优点，但明显可以看出代码变复杂了。</p><p>这个例子的UML图如下所示:</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191218172739.png" alt="QQ截图20191218172739.png"></p><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>将一个类的接口转换为期望的另一个接口，使原本不兼容的类可以一起工作。</p><p>适用于：</p><ol><li>已存在的类，它的方法和需求不匹配时（方法结果相同或者相似）</li></ol><p>优点:</p><ol><li>提高类的透明性和复用，现有的类复用但不需改变；</li><li>目标类和适配器类解耦，提高程序拓展性；</li><li>符合开闭原则。</li></ol><p>缺点：</p><ol><li>适配器编写过程需要全面考虑，可能会增加系统的复杂性；</li><li>降低代码可读性。</li></ol><p>分为：类适配器模式和对象适配器模式。</p><p>先举个类适配器模式的例子：</p><p>假如项目里原有一条水果的产品线，比如包含一个树莓类Raspberry：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Raspberry &#123;</span><br><span class="line"></span><br><span class="line">    public void addRaspberry() &#123;</span><br><span class="line">        System.out.println(&quot;添加点树莓&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随着项目的拓展，现在新增了水果派产品线，新建Pie接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Pie &#123;</span><br><span class="line"></span><br><span class="line">    void make();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要将Raspberry加入到Pie产品线，又不想修改Raspberry类的代码，则可以创建一个适配器RaspberryPieAdaptor：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class RaspberryPieAdaptor extends Raspberry implements Pie&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void make() &#123;</span><br><span class="line">        System.out.println(&quot;制作一个派🥧&quot;);</span><br><span class="line">        super.addRaspberry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器继承被适配的类，实现新的产品线接口。</p><p>在Application里测试一波：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Pie pie &#x3D; new RaspberryPieAdaptor();</span><br><span class="line">        pie.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">制作一个派🥧</span><br><span class="line">添加点树莓</span><br></pre></td></tr></table></figure><p>成功通过适配器制造了树莓派。类适配器模式的UML图很简单：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191219105058.png" alt="QQ截图20191219105058.png"></p><p>对象适配器模式只需要将RaspberryPieAdaptor修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class RaspberryPieAdaptor implements Pie&#123;</span><br><span class="line"></span><br><span class="line">    private Raspberry raspberry &#x3D; new Raspberry();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void make() &#123;</span><br><span class="line">        System.out.println(&quot;制作一个派🥧&quot;);</span><br><span class="line">        raspberry.addRaspberry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式不直接继承被适配者，而是在适配器里创建被适配者。这种模式的UML图：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191219110730.png" alt="QQ截图20191219110730.png"></p><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>提供了减少对象数量从而改善应用所需的对象结构的方式，运用共享技术有效地支持大量细粒度的对象。</p><p>适用于：</p><ol><li>底层系统开发，解决性能问题；</li><li>系统拥有大量相似对象，需要缓冲池的场景。</li></ol><p>优点：</p><ol><li>减少对象的创建，降低内存占用；</li></ol><p>缺点：</p><ol><li>关注内/外部状态，关注线程安全问题；</li><li>程序的逻辑复杂化。</li></ol><p>内部状态：简单理解为享元对象的属性状态，不会因为外部的改变而改变； 外部状态：简单理解为方法参数。</p><p>举个例子，新建派🥧接口Pie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Pie &#123;</span><br><span class="line"></span><br><span class="line">    void make() throws InterruptedException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实现类水果派FruitPie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class FruitPie implements Pie &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private LocalDateTime productTime;</span><br><span class="line"></span><br><span class="line">    public FruitPie(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductTime(LocalDateTime productTime) &#123;</span><br><span class="line">        this.productTime &#x3D; productTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void make() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(100);</span><br><span class="line">            System.out.println(name + &quot;生产时间：&quot; + this.productTime);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含名称和生产日期属性，并且有个make方法。</p><p>接着创建生产FruitPie的工厂FruitPieFactory：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class FruitPieFactory &#123;</span><br><span class="line"></span><br><span class="line">    private static final HashMap&lt;String, FruitPie&gt; PIE_HASH_MAP &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public static FruitPie produce(String name) &#123;</span><br><span class="line">        FruitPie fruitPie &#x3D; PIE_HASH_MAP.get(name);</span><br><span class="line">        if (fruitPie &#x3D;&#x3D; null) &#123;</span><br><span class="line">            System.out.println(&quot;没有&quot; + name + &quot;制作方法，学习制作...&quot;);</span><br><span class="line">            fruitPie &#x3D; new FruitPie(name);</span><br><span class="line">            PIE_HASH_MAP.put(name, fruitPie);</span><br><span class="line">        &#125;</span><br><span class="line">        return fruitPie;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码关键是通过HashMap存储对象。</p><p>编写个测试类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    private static final String[] PIE &#x3D; &#123;&quot;🍇派&quot;, &quot;🍈派&quot;, &quot;🍓派&quot;, &quot;🍒派&quot;&#125;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        IntStream.range(0, 10).forEach((i) -&gt; &#123;</span><br><span class="line">            String name &#x3D; PIE[(int) (Math.random() * PIE.length)];</span><br><span class="line">            FruitPie fruitPie &#x3D; FruitPieFactory.produce(name);</span><br><span class="line">            fruitPie.setProductTime(LocalDateTime.now());</span><br><span class="line">            fruitPie.make();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">没有🍓派制作方法，学习制作...</span><br><span class="line">🍓派生产时间：2019-12-19T16:13:26.397</span><br><span class="line">没有🍇派制作方法，学习制作...</span><br><span class="line">🍇派生产时间：2019-12-19T16:13:26.498</span><br><span class="line">🍇派生产时间：2019-12-19T16:13:26.599</span><br><span class="line">没有🍒派制作方法，学习制作...</span><br><span class="line">🍒派生产时间：2019-12-19T16:13:26.700</span><br><span class="line">🍒派生产时间：2019-12-19T16:13:26.800</span><br><span class="line">🍒派生产时间：2019-12-19T16:13:26.901</span><br><span class="line">没有🍈派制作方法，学习制作...</span><br><span class="line">🍈派生产时间：2019-12-19T16:13:27.002</span><br><span class="line">🍓派生产时间：2019-12-19T16:13:27.103</span><br><span class="line">🍇派生产时间：2019-12-19T16:13:27.203</span><br><span class="line">🍇派生产时间：2019-12-19T16:13:27.304</span><br></pre></td></tr></table></figure><p>从结果看，在10次循环中，只生产了4个对象，这很好的描述了系统有大量相似对象，需要缓冲池的场景。</p><p>JDK中的字符串常量池，数据库连接池等都是用的享元模式。</p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>将对象组合成树形结构以表示“部分-整体”的层次结构，使客户端对单个对象和组合对象保持一致的方式处理。</p><p>适用于：</p><ol><li>客户端可以忽略组合对象与单个对象的差异；</li><li>处理树形结构数据。</li></ol><p>优点:</p><ol><li>层次清晰；</li><li>客户端不必关系层次差异，方便控制；</li><li>符合开闭原则。</li></ol><p>缺点：</p><ol><li>树形处理较为复杂。</li></ol><p>举个菜单按钮组成的树形例子。</p><p>新建菜单按钮的组合抽象类AbstractMenuButton：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractMenuButton &#123;</span><br><span class="line"></span><br><span class="line">    public void add(AbstractMenuButton abstractMenuButton) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;不支持创建操作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;不支持名称获取&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getType() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;不支持类型获取&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getIcon() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;不支持图标&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void print() &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;不支持打印操作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组合了菜单按钮操作的基本方法。</p><p>新增按钮类Button：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Button extends AbstractMenuButton &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Button(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getType() &#123;</span><br><span class="line">        return &quot;按钮&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void print() &#123;</span><br><span class="line">        System.out.println(getName() + &quot;【&quot; + getType() + &quot;】&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按钮拥有名称属性，并且支持名称获取，类型获取和打印方法，所以重写了这三个父类方法。</p><p>接着新建菜单类Menu：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class Menu extends AbstractMenuButton &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;AbstractMenuButton&gt; items &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    private String name;</span><br><span class="line">    private String icon;</span><br><span class="line">    private Integer level;</span><br><span class="line"></span><br><span class="line">    public Menu(String name, String icon, Integer level) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.icon &#x3D; icon;</span><br><span class="line">        this.level &#x3D; level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void add(AbstractMenuButton abstractMenuButton) &#123;</span><br><span class="line">        items.add(abstractMenuButton);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getType() &#123;</span><br><span class="line">        return &quot;菜单&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getIcon() &#123;</span><br><span class="line">        return this.icon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void print() &#123;</span><br><span class="line">        System.out.println(getIcon() + getName() + &quot;【&quot; + getType() + &quot;】&quot;);</span><br><span class="line">        for (AbstractMenuButton item : items) &#123;</span><br><span class="line">            if (this.level !&#x3D; null) &#123;</span><br><span class="line">                for (int i &#x3D; 0; i &lt; this.level; i++) &#123;</span><br><span class="line">                    System.out.print(&quot;    &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            item.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单包含名称、图标和层级属性，并且菜单可以包含下级（比如下级菜单，下级按钮），所以它包含一个List类型的属性items。</p><p>此外，菜单包含添加下级、名称获取、类型获取、图标获取和打印方法。</p><p>新建一个客户端，测试菜单按钮的层级结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Menu userMenu &#x3D; new Menu(&quot;用户管理&quot;, &quot;🧑&quot;, 2);</span><br><span class="line">        Button createUser &#x3D; new Button(&quot;新增用户&quot;);</span><br><span class="line">        Button updateUser &#x3D; new Button(&quot;修改用户&quot;);</span><br><span class="line">        Button deleteUser &#x3D; new Button(&quot;删除用户&quot;);</span><br><span class="line">        userMenu.add(createUser);</span><br><span class="line">        userMenu.add(updateUser);</span><br><span class="line">        userMenu.add(deleteUser);</span><br><span class="line"></span><br><span class="line">        Menu logMenu &#x3D; new Menu(&quot;操作日志&quot;, &quot;📃&quot;, 2);</span><br><span class="line">        Button export &#x3D; new Button(&quot;导出Excel&quot;);</span><br><span class="line">        logMenu.add(export);</span><br><span class="line"></span><br><span class="line">        Menu systemMenu &#x3D; new Menu(&quot;系统管理&quot;, &quot;🔨&quot;, 1);</span><br><span class="line">        systemMenu.add(userMenu);</span><br><span class="line">        systemMenu.add(logMenu);</span><br><span class="line"></span><br><span class="line">        systemMenu.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印输出如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">🔨系统管理【菜单】</span><br><span class="line">    🧑用户管理【菜单】</span><br><span class="line">        新增用户【按钮】</span><br><span class="line">        修改用户【按钮】</span><br><span class="line">        删除用户【按钮】</span><br><span class="line">    📃操作日志【菜单】</span><br><span class="line">        导出Excel【按钮】</span><br></pre></td></tr></table></figure><p>UML图如下所示：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191219190427.png" alt="QQ截图20191219190427.png"></p><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p>将抽象部分和具体实现部分分离，使它们都可以独立变化。通过组合的方式建立两个类之间的关系，而不是通过继承。</p><p>适用于：</p><ol><li>抽象和实体实现之间增加更多的灵活性；</li><li>一个类存在多个独立变化的维度，并且需要独立拓展；</li><li>不希望使用继承。</li></ol><p>优点：</p><ol><li>分离抽象部分和具体实现部分；</li><li>提高了系统可拓展性；</li><li>符合开闭原则和合成复用原则。</li></ol><p>缺点：</p><ol><li>增加了系统的理解和设计难度；</li></ol><p>举个例子：</p><p>现有派的接口类Pie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface Pie &#123;</span><br><span class="line"></span><br><span class="line">    Pie makePie();</span><br><span class="line"></span><br><span class="line">    void getType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含制作派和获取派类型抽象方法。</p><p>接着创建两个Pie的实现类，苹果派AppliePie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class ApplePie implements Pie &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Pie makePie() &#123;</span><br><span class="line">        System.out.println(&quot;制作苹果派🍎🥧&quot;);</span><br><span class="line">        return new ApplePie();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void getType() &#123;</span><br><span class="line">        System.out.println(&quot;水果派&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>胡萝卜派CarrotPie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class CarrotPie implements Pie&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Pie makePie() &#123;</span><br><span class="line">        System.out.println(&quot;制作胡萝卜派🥕🥧&quot;);</span><br><span class="line">        return new CarrotPie();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void getType() &#123;</span><br><span class="line">        System.out.println(&quot;蔬菜沙拉派&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建一个店铺抽象类Store，通过属性的方式和Pie相关联，目的是可以在不同的店铺实现类中灵活地制作各种派：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Store &#123;</span><br><span class="line"></span><br><span class="line">    protected Pie pie;</span><br><span class="line"></span><br><span class="line">    public Store(Pie pie)&#123;</span><br><span class="line">        this.pie &#x3D; pie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    abstract Pie makePie();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Store子类之一，山姆大叔的小店SamStore：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class SamStore extends Store&#123;</span><br><span class="line"></span><br><span class="line">    public SamStore(Pie pie) &#123;</span><br><span class="line">        super(pie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Pie makePie() &#123;</span><br><span class="line">        System.out.print(&quot;山姆大叔的小店💒&quot;);</span><br><span class="line">        return pie.makePie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Store子类之二，杰克的小店JackStore：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class JackStore extends Store &#123;</span><br><span class="line"></span><br><span class="line">    public JackStore(Pie pie) &#123;</span><br><span class="line">        super(pie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Pie makePie() &#123;</span><br><span class="line">        System.out.print(&quot;杰克的小店💒&quot;);</span><br><span class="line">        return pie.makePie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个客户端，测试Pie的实现类和Store的继承类之间的自由组合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Store samStore &#x3D; new SamStore(new ApplePie());</span><br><span class="line">        Pie samStorePie &#x3D; samStore.makePie();</span><br><span class="line">        samStorePie.getType();</span><br><span class="line"></span><br><span class="line">        Store jackStore &#x3D; new JackStore(new CarrotPie());</span><br><span class="line">        Pie jackStorePie &#x3D; jackStore.makePie();</span><br><span class="line">        jackStorePie.getType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">山姆大叔的小店💒制作苹果派🍎🥧</span><br><span class="line">水果派</span><br><span class="line">杰克的小店💒制作胡萝卜派🥕🥧</span><br><span class="line">蔬菜沙拉派</span><br></pre></td></tr></table></figure><p>这个例子很好地体现了桥接模式的特点，UML图如下：</p><p><img src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191220151943.png" alt="QQ截图20191220151943.png"></p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>为其他对象提供一种代理，以控制对这个对象的访问，代理对象在客户端和目标对象之间起到了中介的作用。</p><p>适用于：</p><ol><li>保护目标对象；</li><li>增强目标对象。</li></ol><p>优点：</p><ol><li>将代理对象和真实被调用的目标对象分离；</li><li>降低耦合，拓展性好；</li><li>保护目标对象，增强目标对象。</li></ol><p>缺点：</p><ol><li>造成类的数目增加，增加复杂度；</li><li>客户端和目标对象增加代理对象，会造成处理速度变慢。</li></ol><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>通过在代码中显式地定义了一个代理类，在代理类中通过同名的方法对目标对象的方法进行包装，客户端通过调用代理类的方法来调用目标对象的方法。</p><p>举个静态代理的例子：</p><p>新建一个派的制作接口PieService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface PieServcie &#123;</span><br><span class="line">    void makePie();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建其实现类PieServiceImpl：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class PieServiceImpl implements PieServcie&#123;</span><br><span class="line">    public void makePie() &#123;</span><br><span class="line">        System.out.println(&quot;制作🥗派&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要对PieServiceImpl的<code>makePie</code>方法增强，我们需要创建一个代理对象PieServiceProxy：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class PieServiceProxy &#123;</span><br><span class="line"></span><br><span class="line">    private PieServcie pieServcie;</span><br><span class="line"></span><br><span class="line">    public void makePie() &#123;</span><br><span class="line">        beforeMethod();</span><br><span class="line">        pieServcie &#x3D; new PieServiceImpl();</span><br><span class="line">        pieServcie.makePie();</span><br><span class="line">        afterMethod();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void beforeMethod() &#123;</span><br><span class="line">        System.out.println(&quot;准备材料&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void afterMethod() &#123;</span><br><span class="line">        System.out.println(&quot;保鲜&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在PieServiceProxy中我们创建了一个和PieServcie一致的同名方法<code>makePie</code>，方法内部调用了PieServiceImpl的<code>makePie</code>方法，并且在方法调用前调用了代理类的<code>beforeMethod</code>方法，方法调用后调用了代理类的<code>afterMethod</code>方法。</p><p>创建客户端Application，测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        PieServiceProxy proxy &#x3D; new PieServiceProxy();</span><br><span class="line">        proxy.makePie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">准备材料</span><br><span class="line">制作🥗派</span><br><span class="line">保鲜</span><br></pre></td></tr></table></figure><p>这个例子的UML图如下：</p><p><img src="https://mrbird.cc/img/QQ20200421-100633@2x.png" alt="QQ20200421-100633@2x"></p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>JDK的动态代理只能代理接口，通过接口的方法名在动态生成的代理类中调用业务实现类的同名方法。</p><p>静态代理的缺点就是每需要代理一个类，就需要手写对应的代理类。这个问题可以用动态代理来解决。举个动态代理的例子：</p><p>新建冰淇淋制作接口IceCreamService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface IceCreamService &#123;</span><br><span class="line">    void makeIceCream(String fruit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类IceCreamServiceImpl：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class IceCreamServiceImpl implements IceCreamService &#123;</span><br><span class="line"></span><br><span class="line">    public void makeIceCream(String fruit) &#123;</span><br><span class="line">        System.out.println(&quot;制作&quot; + fruit + &quot;🍦&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在需要对IceCreamServiceImpl进行代理增强，如果使用静态代理，我们需要编写一个IceCreamServiceImplProxy类，使用动态代理的话，我们可以动态生成对应的代理类。</p><p>创建DynamicProxy：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicProxy implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 代理的目标对象</span><br><span class="line">    private Object object;</span><br><span class="line"></span><br><span class="line">    public DynamicProxy(Object object) &#123;</span><br><span class="line">        this.object &#x3D; object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object proxy() &#123;</span><br><span class="line">        Class&lt;?&gt; clazz &#x3D; object.getClass();</span><br><span class="line">        &#x2F;&#x2F; 生成代理对象</span><br><span class="line">        return Proxy.newProxyInstance(clazz.getClassLoader(),</span><br><span class="line">                clazz.getInterfaces(), this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param proxy  动态生成的代理对象</span><br><span class="line">     * @param method 代理方法</span><br><span class="line">     * @param args   代理方法的方法参数</span><br><span class="line">     * @return 结果</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">       return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理类通过实现InvocationHandler的<code>invoke</code>方法实现，<code>proxy</code>用于生成代理对象。剩下的步骤和静态代理类似，完善DynamicProxy：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicProxy implements InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 代理的目标对象</span><br><span class="line">    private Object object;</span><br><span class="line"></span><br><span class="line">    public DynamicProxy(Object object) &#123;</span><br><span class="line">        this.object &#x3D; object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object proxy() &#123;</span><br><span class="line">        Class&lt;?&gt; clazz &#x3D; object.getClass();</span><br><span class="line">        &#x2F;&#x2F; 生成代理对象</span><br><span class="line">        return Proxy.newProxyInstance(clazz.getClassLoader(),</span><br><span class="line">                clazz.getInterfaces(), this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param proxy  动态生成的代理对象</span><br><span class="line">     * @param method 代理方法</span><br><span class="line">     * @param args   代理方法的方法参数</span><br><span class="line">     * @return 结果</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        beforeMethod(object);</span><br><span class="line">        &#x2F;&#x2F; 反射执行代理对象的目标方法</span><br><span class="line">        Object result &#x3D; method.invoke(object, args);</span><br><span class="line">        afterMethod(object);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void beforeMethod(Object object) &#123;</span><br><span class="line">        if (object instanceof PieServcie) &#123;</span><br><span class="line">            System.out.println(&quot;准备派的材料&quot;);</span><br><span class="line">        &#125; else if (object instanceof IceCreamService) &#123;</span><br><span class="line">            System.out.println(&quot;准备冰淇淋材料&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RuntimeException(&quot;暂不支持代理&quot; + object.getClass() + &quot;类型&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void afterMethod(Object object) &#123;</span><br><span class="line">        if (object instanceof PieServcie) &#123;</span><br><span class="line">            System.out.println(&quot;保鲜派&quot;);</span><br><span class="line">        &#125; else if (object instanceof IceCreamService) &#123;</span><br><span class="line">            System.out.println(&quot;保鲜冰淇淋&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RuntimeException(&quot;暂不支持代理&quot; + object.getClass() + &quot;类型&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建客户端Application测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        PieServcie pieServiceDynamicProxy &#x3D; (PieServcie) new DynamicProxy(new PieServiceImpl()).proxy();</span><br><span class="line">        pieServiceDynamicProxy.makePie();</span><br><span class="line">        System.out.println(&quot;-----------------&quot;);</span><br><span class="line">        IceCreamService iceCreamServiceDynamicProxy &#x3D; (IceCreamService) new DynamicProxy(new IceCreamServiceImpl()).proxy();</span><br><span class="line">        iceCreamServiceDynamicProxy.makeIceCream(&quot;🍓&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">准备派的材料</span><br><span class="line">制作🥗派</span><br><span class="line">保鲜派</span><br><span class="line">-----------------</span><br><span class="line">准备冰淇淋材料</span><br><span class="line">制作🍓🍦</span><br><span class="line">保鲜冰淇淋</span><br></pre></td></tr></table></figure><p>可以看到，通过动态代理我们实现了目标方法增强，并且不需要手写目标类的代理对象。</p><h4 id="CGLib代理"><a href="#CGLib代理" class="headerlink" title="CGLib代理"></a>CGLib代理</h4><p>通过继承来实现，生成的代理类就是目标对象类的子类，通过重写业务方法来实现代理。</p><h4 id="Spring对代理模式的拓展"><a href="#Spring对代理模式的拓展" class="headerlink" title="Spring对代理模式的拓展"></a>Spring对代理模式的拓展</h4><ol><li>当Bean有实现接口时，使用JDK动态代理；</li><li>当Bean没有实现接口时，使用CGLib代理。</li></ol><p>可以通过以下配置强制使用CGLib代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  aop:</span><br><span class="line">    proxy-target-class: true</span><br></pre></td></tr></table></figure><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>模板方法模式定义了一个流程的骨架，由多个方法组成。并允许子类为一个或多个步骤提供实现。简而言之就是公共的不变的部分由父类统一实现，变化的部分由子类来个性化实现。</p><p>优点：</p><ol><li>提高复用性；</li><li>提高拓展性；</li><li>符合开闭原则。</li></ol><p>缺点：</p><ol><li>类的数目增加；</li><li>增加了系统实现的复杂度；</li><li>父类添加新的抽象方法，所有子类都要改一遍。</li></ol><p>举个模板方法模式的例子。定义一个外卖的接口，包含下单、制作和打包配送三个步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Takeaway &#123;</span><br><span class="line"></span><br><span class="line">    final void order() &#123;</span><br><span class="line">        System.out.println(&quot;下单&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final void packageSend() &#123;</span><br><span class="line">        System.out.println(&quot;打包派送&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract void make();</span><br><span class="line"></span><br><span class="line">    protected boolean needTableware() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final void flow() &#123;</span><br><span class="line">        this.order();</span><br><span class="line">        this.make();</span><br><span class="line">        if (needTableware()) &#123;</span><br><span class="line">            System.out.println(&quot;赠送一次性餐具&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.packageSend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中下单和打包配送行为是固定的，不同的是制作过程，所以<code>order</code>和<code>packageSend</code>方法提供了默认实现，并且由final修饰，子类不可重写。此外，我们还可以通过<code>needTableware</code>这个钩子方法来控制某些子类的定制化需求。</p><p>新增BarbecueTakeaway继承Takeaway：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class BarbecueTakeaway extends Takeaway &#123;</span><br><span class="line"></span><br><span class="line">    private final boolean needTableware;</span><br><span class="line"></span><br><span class="line">    public BarbecueTakeaway(boolean needTableware) &#123;</span><br><span class="line">        this.needTableware &#x3D; needTableware;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void make() &#123;</span><br><span class="line">        System.out.println(&quot;制作烤肉&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean needTableware() &#123;</span><br><span class="line">        return this.needTableware;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增FruitTakeaway继承Takeaway：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class FruitTakeaway extends Takeaway &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void make() &#123;</span><br><span class="line">        System.out.println(&quot;水果配货&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean needTableware() &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增个客户端Application测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Takeaway barbecue &#x3D; new BarbecueTakeaway(true);</span><br><span class="line">        barbecue.flow();</span><br><span class="line"></span><br><span class="line">        FruitTakeaway fruit &#x3D; new FruitTakeaway();</span><br><span class="line">        fruit.flow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">下单</span><br><span class="line">制作烤肉</span><br><span class="line">赠送一次性餐具</span><br><span class="line">打包派送</span><br><span class="line">下单</span><br><span class="line">水果配货</span><br><span class="line">打包派送</span><br></pre></td></tr></table></figure><p>UML：</p><p><img src="https://mrbird.cc/img/QQ20200421-153516@2x.png" alt="QQ20200421-153516@2x"></p><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>ignore</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式定义了算法家族，分别封装起来，让它们之间可以互相替换。此模式让算法的变化不会影响到使用算法的用户。策略模式常用于消除大量的if else代码。</p><p>适用场景：</p><ol><li>系统有很多类，它们的区别仅仅在于行为不同；</li><li>一个系统需要动态地在几种算法中选择一种；</li></ol><p>举个策略模式的例子（促销活动），定义一个促销策略接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface PromotionStrategy &#123;</span><br><span class="line"></span><br><span class="line">    void promotion();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类之一（策略之一），满减促销策略：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class FullReductionPromotionStrategy implements PromotionStrategy &#123;</span><br><span class="line">    public void promotion() &#123;</span><br><span class="line">        System.out.println(&quot;满1000立减1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类之一（策略之一），打折促销策略：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class DiscountPromotionStrategy implements PromotionStrategy &#123;</span><br><span class="line">    public void promotion() &#123;</span><br><span class="line">        System.out.println(&quot;9.9折钜惠&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个客户端测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟客户端传递的促销策略key</span><br><span class="line">        String promotionKey &#x3D; &quot;fr&quot;;</span><br><span class="line">        PromotionStrategy strategy;</span><br><span class="line">        if (&quot;fr&quot;.equals(promotionKey)) &#123;</span><br><span class="line">            strategy &#x3D; new FullReductionPromotionStrategy();</span><br><span class="line">        &#125; else if (&quot;ds&quot;.equals(promotionKey)) &#123;</span><br><span class="line">            strategy &#x3D; new DiscountPromotionStrategy();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new RuntimeException(&quot;暂不支持该促销活动&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        strategy.promotion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满1000立减1</span><br></pre></td></tr></table></figure><p>策略模式常结合工厂模式来消除大量的if else代码，我们新建一个促销策略的创建工厂：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class PromotionStrategyFactory &#123;</span><br><span class="line"></span><br><span class="line">    private static final Map&lt;String, PromotionStrategy&gt; PROMOTION_STRATEGY_MAP &#x3D; new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private static final PromotionStrategy NON_PROMOTION &#x3D; () -&gt; System.out.println(&quot;无促销活动&quot;);</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        PROMOTION_STRATEGY_MAP.put(PromotionKey.FR, new FullReductionPromotionStrategy());</span><br><span class="line">        PROMOTION_STRATEGY_MAP.put(PromotionKey.DS, new DiscountPromotionStrategy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private PromotionStrategyFactory() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static PromotionStrategy getPromotionStrategy(String promotionKey) &#123;</span><br><span class="line">        PromotionStrategy strategy &#x3D; PROMOTION_STRATEGY_MAP.get(promotionKey);</span><br><span class="line">        return strategy &#x3D;&#x3D; null ? NON_PROMOTION : strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private interface PromotionKey &#123;</span><br><span class="line">        String FR &#x3D; &quot;fr&quot;;</span><br><span class="line">        String DS &#x3D; &quot;ds&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，我们通过Map来装载促销策略，这样可以减少对象的重复创建。如果不希望在static块中一次性初始化所有促销策略，我们可以结合享元模式来推迟对象创建过程。</p><p>通过这个工厂方法，上面客户端代码可以简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; 模拟客户端传递的促销策略key</span><br><span class="line">        String promotionKey &#x3D; &quot;fr&quot;;</span><br><span class="line">        PromotionStrategy promotionStrategy &#x3D; PromotionStrategyFactory.getPromotionStrategy(promotionKey);</span><br><span class="line">        promotionStrategy.promotion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>用的较少，暂不记录。</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式定义了对象之间的一对多依赖，让多个观察者同时监听某个主题对象，当主体对象发生变化时，它的所有观察者都会收到响应的通知。</p><p>优点：</p><ol><li>观察者和被观察者之间建立一个抽象的耦合；</li><li>观察者模式支持广播通信。</li></ol><p>缺点：</p><ol><li>观察者之间有过多的细节依赖，提高时间消耗及程序复杂度；</li><li>应避免循环调用。</li></ol><p>JDK对观察者模式提供了支持。下面举个观察者模式的例子。</p><p>创建一个博客类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 继承 Observable类，Blog为被观察对象</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Blog extends Observable &#123;</span><br><span class="line"></span><br><span class="line">    private String title;</span><br><span class="line"></span><br><span class="line">    public Blog(String title) &#123;</span><br><span class="line">        this.title &#x3D; title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTitle() &#123;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void comment(Comment comment) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(comment.getNickname() + &quot;评论了&lt;&quot; + this.title + &quot;&gt; ，&quot; +</span><br><span class="line">                &quot;评论内容：&quot; + comment.getValue());</span><br><span class="line">        &#x2F;&#x2F; 设置标识位 changed &#x3D; true，表示被观察者发生了改变</span><br><span class="line">        setChanged();</span><br><span class="line">        &#x2F;&#x2F; 通知观察者，可以给观察者传递数据</span><br><span class="line">        notifyObservers(comment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Comment类代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Comment &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 评论者昵称</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String nickname;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 评论内容</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String value;</span><br><span class="line"></span><br><span class="line">    public Comment(String nickname, String value) &#123;</span><br><span class="line">        this.nickname &#x3D; nickname;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getValue() &#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getNickname() &#123;</span><br><span class="line">        return nickname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Blog类是被观察者对象，被观察者对象需要继承JDK的Observable类，继承后，被观察者对象包含如下属性和方法：</p><p><img src="https://mrbird.cc/img/QQ20200511-093515@2x.png" alt="QQ20200511-093515@2x"></p><p>这些方法都是线程安全方法（加了synchronized同步锁）。</p><p>Blog的comment方法中，当博客收到评论时，首先调用父类的setChanged()方法，设置标识位 changed = true，表示被观察者发生了改变；然后调用父类的notifyObservers(Object)方法通知所有观察者。</p><p>被观察者对象创建好后，我们接着创建观察者。新建一个Author类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Author implements Observer &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Author(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 观察者被通知后，就会调用这个方法</span><br><span class="line">     *</span><br><span class="line">     * @param o   被观察者对象</span><br><span class="line">     * @param arg 被观察者传递过来的数据</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void update(Observable o, Object arg) &#123;</span><br><span class="line">        Blog blog &#x3D; (Blog) o;</span><br><span class="line">        Comment comment &#x3D; (Comment) arg;</span><br><span class="line">        System.out.println(&quot;系统感知到&quot; + this.name + &quot;撰写的博文&lt;&quot; +</span><br><span class="line">                blog.getTitle() + &quot;&gt;收到了&quot; + comment.getNickname() +</span><br><span class="line">                &quot;的评论，评论内容为：&quot; + comment.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者对象需要实现JDK的Observer类，重写update方法。当被观察者对象调用了notifyObservers方法后，相应的观察者的update方法会被调用。</p><p>新建一个客户端测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Blog blog &#x3D; new Blog(&quot;Java从入门到放弃&quot;);</span><br><span class="line">        Author author &#x3D; new Author(&quot;MrBird&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 添加观察者</span><br><span class="line">        blog.addObserver(author);</span><br><span class="line"></span><br><span class="line">        Comment comment &#x3D; new Comment(&quot;Scott&quot;,</span><br><span class="line">                &quot;感谢楼主的文章，让我及时放弃Java，回家继承了千万家产。&quot;);</span><br><span class="line">        blog.comment(comment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scott评论了&lt;Java从入门到放弃&gt; ，评论内容：感谢楼主的文章，让我及时放弃Java，回家继承了千万家产。</span><br><span class="line">系统感知到MrBird撰写的博文&lt;Java从入门到放弃&gt;收到了Scott的评论，评论内容为：感谢楼主的文章，让我及时放弃Java，回家继承了千万家产。</span><br></pre></td></tr></table></figure><p>值得注意的是，观察者的update方法里的逻辑最好进行异步化，这样在并发环境下可以提升程序性能。</p><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><p>参考：<a href="https://www.cnblogs.com/jimoer/p/9537997.html%E3%80%82">https://www.cnblogs.com/jimoer/p/9537997.html。</a></p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>暂不记录。</p><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>暂不记录。</p><h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><p>职责链模式为请求创建一个接收此次请求对象的链。</p><p>适用于：</p><ul><li>一个请求的处理需要多个对象当中的一个或几个协作处理；</li></ul><p>优点：</p><ol><li>请求的发送者和接受者（请求的处理）解耦；</li><li>职责链可以动态的组合。</li></ol><p>缺点：</p><ol><li>职责链太长或者处理时间过长，影响性能；</li><li>职责链可能过多。</li></ol><p>举个字符串校验的例子。新建一个字符串校验抽象类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public abstract class StringValidator &#123;</span><br><span class="line"></span><br><span class="line">    protected StringValidator validator;</span><br><span class="line"></span><br><span class="line">    public void setNextValidator(StringValidator validator) &#123;</span><br><span class="line">        this.validator &#x3D; validator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public abstract void check(String value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringValidator类包含了一个自身类型的成员变量，这也是该模式的设计核心，以此形成链条。</p><p>创建一个校验字符串长度的类StringLengthValidator：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class StringLengthValidator extends StringValidator &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void check(String value) &#123;</span><br><span class="line">        if (value !&#x3D; null &amp;&amp; value.length() !&#x3D; 0) &#123;</span><br><span class="line">            System.out.println(&quot;字符串长度合法&quot;);</span><br><span class="line">            if (validator !&#x3D; null) &#123;</span><br><span class="line">                validator.check(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;字符串长度不合法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，在字符串长度校验合法后，我们判断父类的validator属性是否为空，不为空则调用其check方法继续下一步校验。</p><p>接着再新建一个校验字符串内容的类StringValueValidator：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class StringValueValidator extends StringValidator &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void check(String value) &#123;</span><br><span class="line">        if (value.contains(&quot;fuck&quot;)) &#123;</span><br><span class="line">            System.out.println(&quot;字符串值不合法&quot;);</span><br><span class="line">            if (validator !&#x3D; null) &#123;</span><br><span class="line">                validator.check(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;字符串值合法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>套路和StringLengthValidator一样。接着创建一个客户端类，演示下如何让校验类形成一个链条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        StringValidator lengthValidator &#x3D; new StringLengthValidator();</span><br><span class="line">        StringValidator valueValidator &#x3D; new StringValueValidator();</span><br><span class="line"></span><br><span class="line">        lengthValidator.setNextValidator(valueValidator);</span><br><span class="line">        lengthValidator.check(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，通过StringValidator的setNextValidator方法，我们可以指定下一个校验类，以此形成链条，程序输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串长度合法</span><br><span class="line">字符串值合法</span><br></pre></td></tr></table></figure><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><p>暂不记录🌚</p><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>暂不记录🌚</p><blockquote><p>参考连接：<a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_(%E8%AE%A1%E7%AE%97%E6%9C%BA)">https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_(%E8%AE%A1%E7%AE%97%E6%9C%BA)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java设计模式学习&quot;&gt;&lt;a href=&quot;#Java设计模式学习&quot; class=&quot;headerlink&quot; title=&quot;Java设计模式学习&quot;&gt;&lt;/a&gt;Java设计模式学习&lt;/h2&gt;&lt;h2 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring源码</title>
    <link href="http://example.com/2021/12/01/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2021/12/01/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2021-11-30T16:02:17.000Z</published>
    <updated>2021-12-06T15:23:01.852Z</updated>
    
    <content type="html"><![CDATA[<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>Spring Framework</p><p><a href="http://static.iocoder.cn/images/Spring/2018-12-24/01.jpg"><img src="http://static.iocoder.cn/images/Spring/2018-12-24/01.jpg" alt="Spring Framework"></a></p><p><strong>Spring 核心容器 Core Container</strong></p><ul><li>Spring Core</li><li>Spring Bean</li><li>Spring Context</li><li>SpEL (Spring Expression Language)</li></ul><p><strong>数据访问</strong> <strong>Data Access</strong></p><ul><li>JDBC</li><li>ORM</li><li>OXM</li><li>Transaction</li></ul><p><strong>Web</strong></p><ul><li>WebMVC</li><li>WebFlux</li><li>WebSocket</li></ul><p><strong>AOP</strong></p><ul><li>AOP</li><li>Aspects</li></ul><p><strong>其他</strong></p><ul><li>JMS (Java Messaging Service)</li><li>Test</li><li>Messaging</li></ul><p><strong>使用 Spring 框架带来的主要好处：</strong></p><ul><li><strong>DI</strong> ：**<a href="http://howtodoinjava.com/2013/03/19/inversion-of-control-ioc-and-dependency-injection-di-patterns-in-spring-framework-and-related-interview-questions/">Dependency Injection(DI)</a>** 方法，使得构造器和 JavaBean、properties 文件中的依赖关系一目了然。</li><li><strong>轻量级</strong>：与 EJB 容器相比较，IoC 容器更加趋向于<strong>轻量级</strong>。这样一来 IoC 容器在有限的内存和 CPU 资源的情况下，进行应用程序的开发和发布就变得十分有利。</li><li><strong>面向切面编程(AOP)\</strong>： Spring 支持面向**切面编程**，同时把应用的业务逻辑与系统的服务分离开来。</li><li><strong>集成主流框架</strong>：Spring 并没有闭门造车，Spring <strong>集成</strong>了已有的技术栈，比如 ORM 框架、Logging 日期框架、J2EE、Quartz 和 JDK Timer ，以及其他视图技术。</li><li>模块化：Spring 框架是按照<strong>模块</strong>的形式来组织的。由包和类的命名，就可以看出其所属的模块，开发者仅仅需要选用他们需要的模块即可。</li><li><strong>便捷的测试</strong>：要 <a href="http://howtodoinjava.com/2013/04/19/how-to-unit-test-spring-security-authentication-with-junit/">测试一项用Spring开发的应用程序</a> 十分简单，因为<strong>测试</strong>相关的环境代码都已经囊括在框架中了。更加简单的是，利用 JavaBean 形式的 POJO 类，可以很方便的利用依赖注入来写入测试数据。</li><li><strong>Web 框架</strong>：Spring 的 <strong>Web 框架</strong>亦是一个精心设计的 Web MVC 框架，为开发者们在 Web 框架的选择上提供了一个除了主流框架比如 Struts 、过度设计的、不流行 Web 框架的以外的有力选项。</li><li><strong>事务管理</strong>：Spring 提供了一个便捷的<strong>事务管理</strong>接口，适用于小型的本地事物处理（比如在单 DB 的环境下）和复杂的共同事物处理（比如利用 JTA 的复杂 DB 环境）。</li><li><strong>异常处理</strong>：Spring 提供一个方便的 API ，将特定技术的异常(由JDBC, Hibernate, 或 JDO 抛出)转化为一致的、Unchecked 异常。</li></ul><p><strong>设计模式</strong></p><ul><li>代理模式 — 在 AOP 和 remoting 中被用的比较多。</li><li>单例模式 — 在 Spring 配置文件中定义的 Bean 默认为单例模式。</li><li>模板方法 — 用来解决代码重复的问题。比如 <a href="http://howtodoinjava.com/2015/02/20/spring-restful-client-resttemplate-example/">RestTemplate</a>、JmsTemplate、JdbcTemplate 。</li><li>工厂模式 — BeanFactory 用来创建对象的实例。</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>IOC ，侧重在于容器。</li><li>Bean ，侧重在于被容器管理的 Bean 。</li></ul><p><strong>容器创建 Bean 对象，将它们装配在一起，配置它们并管理它们的完整生命周期。</strong></p><p>依赖注入 （DI)</p><p>在依赖注入中，你不必主动、手动创建对象，但必须描述如何创建它们。</p><ul><li>你不是直接在代码中将组件和服务连接在一起，而是描述配置文件中哪些组件需要哪些服务。</li><li>然后，再由 IoC 容器将它们装配在一起。</li></ul><p><strong>注入方式</strong></p><ul><li><del>接口注入</del></li><li>构造函数注入</li><li><strong>setter 注入</strong></li></ul><p>Spring 提供了两种( 不是“个” ) IoC 容器，分别是 BeanFactory、ApplicationContext 。</p><ul><li><strong>BeanFactory</strong></li></ul><p>BeanFactory 在 <code>spring-beans</code> 项目提供。</p><p>BeanFactory ，就像一个包含 Bean 集合的工厂类。它会在客户端要求时实例化 Bean 对象。</p><ul><li><strong>ApplicationContext</strong></li></ul><p>ApplicationContext 在 <code>spring-context</code> 项目提供。</p><p>ApplicationContext 接口扩展了 BeanFactory 接口，它在 BeanFactory 基础上提供了一些额外的功能</p><p><strong>Spring Bean 支持 5 种 Scope</strong></p><ul><li><strong>Singleton - 每个 Spring IoC 容器仅有一个单 Bean 实例。默认</strong></li><li><strong>Prototype - 每次请求都会产生一个新的实例。</strong></li><li>Request - 每一次 HTTP 请求都会产生一个新的 Bean 实例，并且该 Bean 仅在当前 HTTP 请求内有效。</li><li>Session - 每一个的 Session 都会产生一个新的 Bean 实例，同时该 Bean 仅在当前 HTTP Session 内有效。</li><li>Application - 每一个 Web Application 都会产生一个新的 Bean ，同时该 Bean 仅在当前 Web Application 内有效。</li></ul><p><strong>Spring Bean 在容器的生命周期</strong></p><p>Spring Bean 的<strong>初始化</strong>流程如下：</p><ul><li>实例化 Bean 对象</li><li>Aware 相关的属性，注入到 Bean 对象</li><li>调用相应的方法，进一步初始化 Bean 对象</li></ul><p><a href="http://static.iocoder.cn/images/Spring/2018-12-24/08.png"><img src="http://static.iocoder.cn/images/Spring/2018-12-24/08.png" alt="流程图"></a></p><p><strong>实例化-&gt;设置属性-&gt;初始化Bean对象-&gt;销毁</strong></p><p><strong>什么是 Spring 装配</strong></p><p>当 Bean 在 Spring 容器中组合在一起时，它被称为<strong>装配</strong>或 <strong>Bean 装配</strong></p><p>装配，和 <strong>DI 依赖</strong>注入，实际是一个东西。</p><ul><li>no - 这是默认设置，表示没有自动装配。应使用显式 Bean 引用进行装配。</li><li>byName - 它根据 Bean 的名称注入对象依赖项。它匹配并装配其属性与 XML 文件中由相同名称定义的 Bean 。</li><li>【最常用】<strong>byType</strong> - 它根据类型注入对象依赖项。如果属性的类型与 XML 文件中的一个 Bean 类型匹配，则匹配并装配属性。</li></ul><p>延迟加载 在Bean 中设置 <code>lzay-init = &quot;true&quot;</code></p><p>Spring 的单例 Bean 是线程安全的。</p><p><strong>循环依赖</strong>的问题见<a href="https://hankz.cc/2021/03/07/%E4%BB%80%E4%B9%88%E6%98%AFspring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://hankz.cc/2021/03/07/%E4%BB%80%E4%B9%88%E6%98%AFspring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p><p><strong>AOP(Aspect-Oriented Programming)，即面向切面编程</strong></p><ul><li>在 OOP 中，以类( Class )作为基本单元</li><li>在 AOP 中，以**切面( Aspect )**作为基本单元。</li></ul><p>实现 AOP 的技术，主要分为两大类：</p><p>① <strong>静态代理</strong> - 指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强。</p><p>② <strong>动态代理</strong> - 在运行时在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。目前 Spring 中使用了两种动态代理库：</p><ul><li><p>JDK 动态代理</p><p> JDK 动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是 InvocationHandler 接口和 Proxy 类。</p></li><li><p>CGLIB</p><p> 如果目标类没有实现接口，那么 Spring AOP 会选择使用 CGLIB 来动态代理目标类。当然，Spring 也支持配置，<strong>强制</strong>使用 CGLIB 动态代理。</p></li></ul><p><strong>Spring Transaction</strong></p><p>事务就是对一系列的数据库操作（比如插入多条数据）进行统一的提交或回滚操作，如果插入成功，那么一起成功，如果中间有一条出现异常，那么回滚之前的所有操作。</p><p>事务的特性<strong>ACID</strong></p><ol><li><strong>原子性</strong> Atomicity ：一个事务中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。</li><li><strong>一致性</strong> Consistency ：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。</li><li><strong>隔离性</strong> Isolation ：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li><strong>持久性</strong> Durability ：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失</li></ol><p><strong>事务管理</strong></p><ul><li><strong>声明式</strong>事务：通过使用注解或基于 XML 的配置事务</li><li><strong>编程式</strong>事务：通过编码的方式实现事务管理，需要在代码中显式的调用事务的获得、提交、回滚。</li></ul><p>一般使用 Spring Boot + 注解的<strong>声明式</strong>事务</p><p><strong>事务隔离级别</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/25419593">《数据库四大特性以及事务隔离级别》</a></li><li><a href="https://www.jianshu.com/p/4e3edbedb9a8">《五分钟搞清楚 MySQL 事务隔离级别》</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">&#x2F;&#x2F; TransactionDefinition.java</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 【Spring 独有】使用后端数据库默认的隔离级别</span><br><span class="line"> *</span><br><span class="line"> * MySQL 默认采用的 REPEATABLE_READ隔离级别</span><br><span class="line"> * Oracle 默认采用的 READ_COMMITTED隔离级别</span><br><span class="line"> *&#x2F;</span><br><span class="line">int ISOLATION_DEFAULT &#x3D; -1;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读</span><br><span class="line"> *&#x2F;</span><br><span class="line">int ISOLATION_READ_UNCOMMITTED &#x3D; Connection.TRANSACTION_READ_UNCOMMITTED;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</span><br><span class="line"> *&#x2F;</span><br><span class="line">int ISOLATION_READ_COMMITTED &#x3D; Connection.TRANSACTION_READ_COMMITTED;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</span><br><span class="line"> *&#x2F;</span><br><span class="line">int ISOLATION_REPEATABLE_READ &#x3D; Connection.TRANSACTION_REPEATABLE_READ;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</span><br><span class="line"> *</span><br><span class="line"> * 但是这将严重影响程序的性能。通常情况下也不会用到该级别。</span><br><span class="line"> *&#x2F;</span><br><span class="line">int ISOLATION_SERIALIZABLE &#x3D; Connection.TRANSACTION_SERIALIZABLE;</span><br></pre></td></tr></table></figure><hr><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><h4 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h4><p>IoC 全称为 <code>Inversion of Control</code>，翻译为 “控制反转”(DI)</p><ol><li><strong>谁控制谁</strong>：在传统的开发模式下，我们都是采用直接 new 一个对象的方式来创建对象，也就是说你依赖的对象直接由你自己控制，但是有了 IoC 容器后，则直接由 IoC 容器来控制。所以“谁控制谁”，当然是 IoC 容器控制对象</li><li><strong>控制什么</strong>：控制对象。</li><li><strong>为何是反转</strong>：没有 IoC 的时候我们都是在自己对象中主动去创建被依赖的对象，这是正转。但是有了 IoC 后，所依赖的对象直接由 IoC 容器创建后注入到被注入的对象中，依赖的对象由原来的主动获取变成被动接受，所以是反转。</li><li><strong>哪些方面反转了</strong>：所依赖对象的获取被反转了。</li></ol><ul><li>Resource 体系</li><li>ResourceLoader 体系</li><li><strong>BeanFactory 体系</strong></li><li>BeanDefinition 体系</li><li><strong>ApplicationContext 体系</strong></li><li>BeanDefinitionReader 体系</li></ul><h4 id="BeanDefinition-解析"><a href="#BeanDefinition-解析" class="headerlink" title="BeanDefinition 解析"></a>BeanDefinition 解析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">ClassPathResource resource &#x3D; new ClassPathResource(&quot;bean.xml&quot;); &#x2F;&#x2F; &lt;1&gt;</span><br><span class="line">DefaultListableBeanFactory factory &#x3D; new DefaultListableBeanFactory(); &#x2F;&#x2F; &lt;2&gt;</span><br><span class="line">XmlBeanDefinitionReader reader &#x3D; new XmlBeanDefinitionReader(factory); &#x2F;&#x2F; &lt;3&gt;</span><br><span class="line">reader.loadBeanDefinitions(resource); &#x2F;&#x2F; &lt;4&gt;</span><br></pre></td></tr></table></figure><p>这段代码是 Spring 中编程式使用 IoC 容器</p><ol><li>获取资源</li><li>获取 BeanFactory</li><li>根据新建的 BeanFactory 创建一个 BeanDefinitionReader 对象，该 Reader 对象为资源的<strong>解析器</strong></li><li>装载资源</li></ol><p>资源定位、装载、注册</p><p>DTD 与 XSD 的区别</p><p>DTD(Document Type Definition)，即文档类型定义，为 XML 文件的验证机制，属于 XML 文件中组成的一部分。DTD 是一种保证 XML 文档格式正确的有效验证方式，它定义了相关 XML 文档的元素、属性、排列方式、元素的内容类型以及元素的层次结构。</p><p>XSD（XML Schemas Definition）即 XML Schema 语言。XML Schema 本身就是一个 XML文档，使用的是 XML 语法，因此可以很方便的解析 XSD 文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">org.springframework.beans.factory.xml.XmlBeanDefinitionReader#doLoadBeanDefinitions</span><br></pre></td></tr></table></figure><ol><li>调用 <code>#getValidationModeForResource(Resource resource)</code> 方法，获取指定资源（xml）的<strong>验证模式</strong>。</li><li>调用 <code>DocumentLoader#loadDocument(InputSource inputSource, EntityResolver entityResolver,ErrorHandler errorHandler, int validationMode, boolean namespaceAware)</code> 方法，获取 XML Document 实例。</li><li>调用 <code>#registerBeanDefinitions(Document doc, Resource resource)</code> 方法，根据获取的 Document 实例，注册 Bean 信息。</li></ol><p><strong>BeanDefinition 的解析过程</strong></p><p><a href="http://static.iocoder.cn/images/Spring/2019-02-16/01.jpg"><img src="http://static.iocoder.cn/images/Spring/2019-02-16/01.jpg" alt="时序图"></a></p><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><h4 id="Bean解析"><a href="#Bean解析" class="headerlink" title="Bean解析"></a><strong>Bean解析</strong></h4><p>Spring 中有两种解析 Bean 的方式：</p><ul><li>如果根节点或者子节点采用默认命名空间的话，则调用 <code>#parseDefaultElement(...)</code> 方法，进行<strong>默认</strong>标签解析</li><li>否则，调用 <code>BeanDefinitionParserDelegate#parseCustomElement(...)</code> 方法，进行<strong>自定义</strong>解析。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">&#x2F;&#x2F;DefaultBeanDefinitionDocumentReader.java</span><br><span class="line"></span><br><span class="line">protected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) &#123;</span><br><span class="line">     if (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">         NodeList nl &#x3D; root.getChildNodes();</span><br><span class="line"></span><br><span class="line">         for(int i &#x3D; 0; i &lt; nl.getLength(); ++i) &#123;</span><br><span class="line">             Node node &#x3D; nl.item(i);</span><br><span class="line">             if (node instanceof Element) &#123;</span><br><span class="line">                 Element ele &#x3D; (Element)node;</span><br><span class="line">                 if (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">                     this.parseDefaultElement(ele, delegate);</span><br><span class="line">                 &#125; else &#123;</span><br><span class="line">                     delegate.parseCustomElement(ele);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         delegate.parseCustomElement(root);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="Bean加载"><a href="#Bean加载" class="headerlink" title="Bean加载"></a>Bean加载</h4><p>当我们显示或者隐式地调用 <code>BeanFactory#getBean(String name)</code> 方法时，则会触发加载 Bean 阶段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">&#x2F;&#x2F;AbstractBeanFactory.java</span><br><span class="line">@Override</span><br><span class="line">public Object getBean(String name) throws BeansException &#123;</span><br><span class="line">return doGetBean(name, null, null, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部调用 <code>doGetBean(String name, final Class&lt;T&gt; requiredType, Object[] args, boolean typeCheckOnly)</code> 方法，其接受四个方法参数：</p><ul><li><code>name</code> ：要获取 Bean 的名字</li><li><code>requiredType</code> ：要获取 bean 的类型</li><li><code>args</code> ：创建 Bean 时传递的参数。这个参数仅限于创建 Bean 时使用。</li><li><code>typeCheckOnly</code> ：是否为类型检查。</li></ul><p><strong>Spring Bean 加载过程的一个概览</strong></p><ol><li>分析从缓存中获取单例 Bean ，以及对 Bean 的实例中获取对象。</li><li>如果从单例缓存中获取 Bean ，Spring 是怎么加载的呢？所以第二部分是分析 Bean 加载，以及 Bean 的依赖处理。</li><li>Bean 已经加载了，依赖也处理完毕了，第三部分则分析各个作用域的 Bean 初始化过程。</li></ol><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">protected &lt;T&gt; T doGetBean(</span><br><span class="line">String name, @Nullable Class&lt;T&gt; requiredType, @Nullable Object[] args, boolean typeCheckOnly)</span><br><span class="line">throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果 name 是 alias ，则获取对应映射的 beanName 。</span><br><span class="line">String beanName &#x3D; transformedBeanName(name);</span><br><span class="line">Object beanInstance;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 从缓存中或者实例工厂中获取 Bean 对象</span><br><span class="line">&#x2F;&#x2F; Eagerly check singleton cache for manually registered singletons.</span><br><span class="line">Object sharedInstance &#x3D; getSingleton(beanName);</span><br><span class="line">if (sharedInstance !&#x3D; null &amp;&amp; args &#x3D;&#x3D; null) &#123;</span><br><span class="line">if (logger.isTraceEnabled()) &#123;</span><br><span class="line">if (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">logger.trace(&quot;Returning eagerly cached instance of singleton bean &#39;&quot; + beanName +</span><br><span class="line">&quot;&#39; that is not fully initialized yet - a consequence of a circular reference&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">logger.trace(&quot;Returning cached instance of singleton bean &#39;&quot; + beanName + &quot;&#39;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;完成 FactoryBean 的相关处理，并用来获取 FactoryBean 的处理结果</span><br><span class="line">beanInstance &#x3D; getObjectForBeanInstance(sharedInstance, name, beanName, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else &#123;</span><br><span class="line">&#x2F;&#x2F; Fail if we&#39;re already creating this bean instance:</span><br><span class="line">&#x2F;&#x2F; We&#39;re assumably within a circular reference.</span><br><span class="line">&#x2F;&#x2F;因为 Spring 只解决单例模式下得循环依赖，在原型模式下如果存在循环依赖则会抛出异常。</span><br><span class="line">if (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">throw new BeanCurrentlyInCreationException(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果容器中没有找到，则从父类容器中加载</span><br><span class="line">&#x2F;&#x2F; Check if bean definition exists in this factory.</span><br><span class="line">BeanFactory parentBeanFactory &#x3D; getParentBeanFactory();</span><br><span class="line">if (parentBeanFactory !&#x3D; null &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">&#x2F;&#x2F; Not found -&gt; check parent.</span><br><span class="line">String nameToLookup &#x3D; originalBeanName(name);</span><br><span class="line">if (parentBeanFactory instanceof AbstractBeanFactory) &#123;</span><br><span class="line">return ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">&#125;</span><br><span class="line">else if (args !&#x3D; null) &#123;</span><br><span class="line">&#x2F;&#x2F; Delegation to parent with explicit args.</span><br><span class="line">return (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">&#125;</span><br><span class="line">else if (requiredType !&#x3D; null) &#123;</span><br><span class="line">&#x2F;&#x2F; No args -&gt; delegate to standard getBean method.</span><br><span class="line">return parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">return (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果不是仅仅做类型检查则是创建bean，这里需要记录</span><br><span class="line">if (!typeCheckOnly) &#123;</span><br><span class="line">markBeanAsCreated(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StartupStep beanCreation &#x3D; this.applicationStartup.start(&quot;spring.beans.instantiate&quot;)</span><br><span class="line">.tag(&quot;beanName&quot;, name);</span><br><span class="line">try &#123;</span><br><span class="line">if (requiredType !&#x3D; null) &#123;</span><br><span class="line">beanCreation.tag(&quot;beanType&quot;, requiredType::toString);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;从容器中获取 beanName 相应的 GenericBeanDefinition 对象，并将其转换为 RootBeanDefinition 对象</span><br><span class="line">RootBeanDefinition mbd &#x3D; getMergedLocalBeanDefinition(beanName);</span><br><span class="line">&#x2F;&#x2F;检查给定的合并的 BeanDefinition</span><br><span class="line">checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Guarantee initialization of beans that the current bean depends on.</span><br><span class="line">String[] dependsOn &#x3D; mbd.getDependsOn();</span><br><span class="line">if (dependsOn !&#x3D; null) &#123;</span><br><span class="line">for (String dep : dependsOn) &#123;</span><br><span class="line">if (isDependent(beanName, dep)) &#123;</span><br><span class="line">throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">&quot;Circular depends-on relationship between &#39;&quot; + beanName + &quot;&#39; and &#39;&quot; + dep + &quot;&#39;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">registerDependentBean(dep, beanName);</span><br><span class="line">try &#123;</span><br><span class="line">getBean(dep);</span><br><span class="line">&#125;</span><br><span class="line">catch (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">throw new BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">&quot;&#39;&quot; + beanName + &quot;&#39; depends on missing bean &#39;&quot; + dep + &quot;&#39;&quot;, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Create bean instance.</span><br><span class="line">if (mbd.isSingleton()) &#123;</span><br><span class="line">sharedInstance &#x3D; getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">try &#123;</span><br><span class="line">return createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line">catch (BeansException ex) &#123;</span><br><span class="line">&#x2F;&#x2F; Explicitly remove instance from singleton cache: It might have been put there</span><br><span class="line">&#x2F;&#x2F; eagerly by the creation process, to allow for circular reference resolution.</span><br><span class="line">&#x2F;&#x2F; Also remove any beans that received a temporary reference to the bean.</span><br><span class="line">destroySingleton(beanName);</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">beanInstance &#x3D; getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else if (mbd.isPrototype()) &#123;</span><br><span class="line">&#x2F;&#x2F; It&#39;s a prototype -&gt; create a new instance.</span><br><span class="line">Object prototypeInstance &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">beforePrototypeCreation(beanName);</span><br><span class="line">prototypeInstance &#x3D; createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">afterPrototypeCreation(beanName);</span><br><span class="line">&#125;</span><br><span class="line">beanInstance &#x3D; getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else &#123;</span><br><span class="line">String scopeName &#x3D; mbd.getScope();</span><br><span class="line">if (!StringUtils.hasLength(scopeName)) &#123;</span><br><span class="line">throw new IllegalStateException(&quot;No scope name defined for bean ´&quot; + beanName + &quot;&#39;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">Scope scope &#x3D; this.scopes.get(scopeName);</span><br><span class="line">if (scope &#x3D;&#x3D; null) &#123;</span><br><span class="line">throw new IllegalStateException(&quot;No Scope registered for scope name &#39;&quot; + scopeName + &quot;&#39;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">Object scopedInstance &#x3D; scope.get(beanName, () -&gt; &#123;</span><br><span class="line">beforePrototypeCreation(beanName);</span><br><span class="line">try &#123;</span><br><span class="line">return createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">afterPrototypeCreation(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">beanInstance &#x3D; getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line">catch (IllegalStateException ex) &#123;</span><br><span class="line">throw new ScopeNotActiveException(beanName, scopeName, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">catch (BeansException ex) &#123;</span><br><span class="line">beanCreation.tag(&quot;exception&quot;, ex.getClass().toString());</span><br><span class="line">beanCreation.tag(&quot;message&quot;, String.valueOf(ex.getMessage()));</span><br><span class="line">cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">throw ex;</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">beanCreation.end();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return adaptBeanInstance(name, beanInstance, requiredType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring bean 的加载过程</p><ol><li>从缓存中获取 bean</li><li>创建 bean 实例对象</li><li>从 bean 实例中获取对象</li></ol><h4 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h4><p>Spring Bean 实例化过程中提到 Spring 并不是一启动容器就开启 bean 的实例化进程，只有当客户端通过显示或者隐式的方式调用 BeanFactory 的 <code>#getBean(...)</code> 方法来请求某个实例对象的时候，它才会触发相应 bean 的实例化进程。当然，也可以选择直接使用 ApplicationContext 容器，因为该容器启动的时候会立刻调用注册到该容器所有 bean 定义的实例化方法。当然，对于 BeanFactory 容器而言，并不是所有的 <code>#getBean(...)</code> 方法都会触发实例化进程，比如 singleton 类型的 bean，该类型的 bean 只会在第一次调用 <code>getBean()</code> 的时候才会触发，而后续的调用则会直接返回容器缓存中的实例对象。</p><p><code>#getBean(...)</code> 方法，只是 bean 实例化进程的入口，真正的实现逻辑其实是在 AbstractAutowireCapableBeanFactory 的 <code>#doCreateBean(...)</code> 中实现</p><p><a href="http://static.iocoder.cn/2a90a57e3bb96cc6ffa2619babe72bc4"><img src="http://static.iocoder.cn/2a90a57e3bb96cc6ffa2619babe72bc4" alt="img"></a></p><p><strong>bean 实例化</strong></p><p>在 <code>#doCreateBean(...)</code> 方法中，首先进行 bean 实例化工作</p><p>这个时候的 Bean 还不能够被我们使用，连最基本的属性都没有设置</p><p>在实例化 bean 过程中，Spring 采用“策略模式”来决定采用哪种方式来实例化 bean，一般有反射和 CGLIB 动态字节码两种方式。</p><p><strong>激活 Aware</strong></p><p>完成 bean 对象实例化并且设置完相关属性和依赖后，则会开始 bean 的初始化进程（ <code>#initializeBean(...)</code> ），初始化第一个阶段是检查当前 bean 对象是否实现了一系列以 Aware 结尾的的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">private void invokeAwareMethods(String beanName, Object bean) &#123;</span><br><span class="line">if (bean instanceof Aware) &#123;</span><br><span class="line">if (bean instanceof BeanNameAware) &#123;</span><br><span class="line">((BeanNameAware) bean).setBeanName(beanName);</span><br><span class="line">&#125;</span><br><span class="line">if (bean instanceof BeanClassLoaderAware) &#123;</span><br><span class="line">ClassLoader bcl &#x3D; getBeanClassLoader();</span><br><span class="line">if (bcl !&#x3D; null) &#123;</span><br><span class="line">((BeanClassLoaderAware) bean).setBeanClassLoader(bcl);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (bean instanceof BeanFactoryAware) &#123;</span><br><span class="line">((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.this);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BeanPostProcessor</strong></p><p>对 Spring 容器提供的 bean 实例对象进行有效的扩展 增强处理</p><p>前置处理和后置处理</p><p><strong>InitializingBean 和 init-method</strong></p><p>在 bean 的初始化进程中会判断当前 bean 是否实现了 InitializingBean，如果实现了则调用 <code>#afterPropertiesSet()</code> 方法，进行初始化工作。然后再检查是否也指定了 <code>init-method</code> ，如果指定了则通过反射机制调用指定的 <code>init-method</code> 方法。</p><p><strong>DisposableBean 和 destroy-method</strong></p><p>与 InitializingBean 和 <code>init-method</code> 用于对象的自定义初始化工作相似，DisposableBean和 <code>destroy-method</code> 则用于对象的自定义销毁工作。</p><p>当一个 bean 对象经历了实例化、设置属性、初始化阶段，那么该 bean 对象就可以供容器使用了（调用的过程）。当完成调用后，如果是 singleton 类型的 bean ，则会看当前 bean 是否应实现了 DisposableBean 接口或者配置了 <code>destroy-method</code> 属性，如果是的话，则会为该实例注册一个用于对象销毁的回调方法，便于在这些 singleton 类型的 bean 对象销毁之前执行销毁逻辑。</p><p>但是，并不是对象完成调用后就会立刻执行销毁方法，因为这个时候 Spring 容器还处于运行阶段，只有当 Spring 容器关闭的时候才会去调用。但是， Spring 容器不会这么聪明会自动去调用这些销毁方法，而是需要我们主动去告知 Spring 容器。</p><ul><li>对于 BeanFactory 容器而言，我们需要主动调用 <code>#destroySingletons()</code> 方法，通知 BeanFactory 容器去执行相应的销毁方法。</li><li>对于 ApplicationContext 容器而言，调用 <code>#registerShutdownHook()</code> 方法。</li></ul><h4 id="ApplicationContext-架构"><a href="#ApplicationContext-架构" class="headerlink" title="ApplicationContext 架构"></a>ApplicationContext 架构</h4><p><a href="http://static.iocoder.cn/3a0321713096156d42661f2df11a93c2"><img src="http://static.iocoder.cn/3a0321713096156d42661f2df11a93c2" alt="ApplicationContext 结构类图"></a></p><ol><li>继承 MessageSource，提供国际化的标准访问策略。</li><li>继承 ApplicationEventPublisher ，提供强大的事件机制。</li><li>扩展 ResourceLoader，可以用来加载多个 Resource，可以灵活访问不同的资源。</li><li>对 Web 应用的支持。</li></ol><p><strong>ApplicationContext子接口</strong></p><p>WebApplicationContext</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">&#x2F;&#x2F; WebApplicationContext.java</span><br><span class="line"></span><br><span class="line">public interface WebApplicationContext extends ApplicationContext &#123;</span><br><span class="line"></span><br><span class="line">    ServletContext getServletContext();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口只有一个 <code>#getServletContext()</code> 方法，用于给 Servlet 提供上下文信息。</p><p>ConfigurableApplicationContext</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">&#x2F;&#x2F; ConfigurableApplicationContext.java</span><br><span class="line"></span><br><span class="line">public interface ConfigurableApplicationContext extends ApplicationContext, Lifecycle, Closeable &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 为 ApplicationContext 设置唯一 ID</span><br><span class="line">    void setId(String id);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 为 ApplicationContext 设置 parent</span><br><span class="line">    &#x2F;&#x2F; 父类不应该被修改：如果创建的对象不可用时，则应该在构造函数外部设置它</span><br><span class="line">    void setParent(@Nullable ApplicationContext parent);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 设置 Environment</span><br><span class="line">    void setEnvironment(ConfigurableEnvironment environment);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取 Environment</span><br><span class="line">    @Override</span><br><span class="line">    ConfigurableEnvironment getEnvironment();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 添加 BeanFactoryPostProcessor</span><br><span class="line">    void addBeanFactoryPostProcessor(BeanFactoryPostProcessor postProcessor);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 添加 ApplicationListener</span><br><span class="line">    void addApplicationListener(ApplicationListener&lt;?&gt; listener);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 添加 ProtocolResolver</span><br><span class="line">    void addProtocolResolver(ProtocolResolver resolver);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 加载或者刷新配置</span><br><span class="line">    &#x2F;&#x2F; 这是一个非常重要的方法</span><br><span class="line">    void refresh() throws BeansException, IllegalStateException;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 注册 shutdown hook</span><br><span class="line">    void registerShutdownHook();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 关闭 ApplicationContext</span><br><span class="line">    @Override</span><br><span class="line">    void close();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ApplicationContext 是否处于激活状态</span><br><span class="line">    boolean isActive();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取当前上下文的 BeanFactory</span><br><span class="line">    ConfigurableListableBeanFactory getBeanFactory() throws IllegalStateException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConfigurableApplicationContext 接口提供的方法都是对 ApplicationContext 进行配置的</p><p>ConfigurableWebApplicationContext</p><p>该接口将这两个接口进行合并</p><p><strong>ClassPathXmlApplicationContext</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">&#x2F;&#x2F; 示例</span><br><span class="line">ApplicationContext ac &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">StudentService studentService &#x3D; (StudentService)ac.getBean(&quot;studentService&quot;);</span><br><span class="line">CODE</span><br><span class="line">org.springframework.context.support.AbstractApplicationContext</span><br><span class="line">      org.springframework.context.support.AbstractRefreshableApplicationContext</span><br><span class="line">            org.springframework.context.support.AbstractRefreshableConfigApplicationContext</span><br><span class="line">                  org.springframework.context.support.AbstractXmlApplicationContext</span><br><span class="line">                        org.springframework.context.support.ClassPathXmlApplicationContext</span><br></pre></td></tr></table></figure><p>这种设计是模板方法模式典型的应用，AbstractApplicationContext 实现了 ConfigurableApplicationContext 这个全家桶接口，其子类 AbstractRefreshableConfigApplicationContext 又实现了 BeanNameAware 和 InitializingBean 接口。所以 ClassPathXmlApplicationContext 设计的顶级接口有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">BeanFactory：Spring 容器 Bean 的管理</span><br><span class="line">MessageSource：管理 message ，实现国际化等功能</span><br><span class="line">ApplicationEventPublisher：事件发布</span><br><span class="line">ResourcePatternResolver：资源加载</span><br><span class="line">EnvironmentCapable：系统 Environment（profile + Properties） 相关</span><br><span class="line">Lifecycle：管理生命周期</span><br><span class="line">Closable：关闭，释放资源</span><br><span class="line">InitializingBean：自定义初始化</span><br><span class="line">BeanNameAware：设置 beanName 的 Aware 接口</span><br></pre></td></tr></table></figure><p>Spring 真的是一个非常优秀的框架，具有良好的结构设计和接口抽象，它的每一个接口职能单一，且都是具体功能到各个模块的高度抽象，且几乎每套接口都提供了一个默认的实现（defaultXXX）。</p><p>对于 ApplicationContext 体系而言，他继承 Spring 中众多的核心接口，能够为客户端提供一个相对完整的 Spring 容器，接口 ConfigurableApplicationContext 对 ApplicationContext 接口再次进行扩展，提供了生命周期的管理功能。<br>抽象类 ApplicationContext 对整套接口提供了大部分的默认实现，将其中“不易变动”的部分进行了封装，通过“组合”的方式将“容易变动”的功能委托给其他类来实现，同时利用模板方法模式将一些方法的实现开放出去由子类实现，从而实现“<strong>对扩展开放，对修改封闭</strong>”的设计原则。</p><h3 id=""><a href="#" class="headerlink" title=""></a><a href="http://static.iocoder.cn/dde0bf4ae9014ec73c80f4c45045850a"><img src="http://static.iocoder.cn/dde0bf4ae9014ec73c80f4c45045850a" alt="ClassPathXmlApplicationContext 的类图"></a></h3><p><strong>ApplicationContext 的 refresh()方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">void refresh() throws BeansException, IllegalStateException;</span><br></pre></td></tr></table></figure><p><strong>刷新 Spring 的应用上下文</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">&#x2F;&#x2F; AbstractApplicationContext.java</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void refresh() throws BeansException, IllegalStateException &#123;</span><br><span class="line">synchronized (this.startupShutdownMonitor) &#123;</span><br><span class="line">&#x2F;&#x2F; 准备刷新上下文环境</span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建并初始化 BeanFactory</span><br><span class="line">ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 填充BeanFactory功能</span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">&#x2F;&#x2F; 提供子类覆盖的额外处理，即子类处理自定义的BeanFactoryPostProcess</span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 激活各种BeanFactory处理器</span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注册拦截Bean创建的Bean处理器，即注册 BeanPostProcessor</span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化上下文中的资源文件，如国际化文件的处理等</span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化上下文事件广播器</span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 给子类扩展初始化其他Bean</span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在所有bean中查找listener bean，然后注册到广播器中</span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化剩下的单例Bean(非延迟加载的)</span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 完成刷新过程,通知生命周期处理器lifecycleProcessor刷新过程,同时发出ContextRefreshEvent通知别人</span><br><span class="line">finishRefresh();</span><br><span class="line">&#125; catch (BeansException ex) &#123;</span><br><span class="line">if (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(&quot;Exception encountered during context initialization - &quot; +</span><br><span class="line">&quot;cancelling refresh attempt: &quot; + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  销毁已经创建的Bean</span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 重置容器激活标签</span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 抛出异常</span><br><span class="line">throw ex;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">&#x2F;&#x2F; Reset common introspection caches in Spring&#39;s core, since we</span><br><span class="line">&#x2F;&#x2F; might not ever need metadata for singleton beans anymore...</span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>…</p><h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><p>…</p><h3 id="IOC流程图"><a href="#IOC流程图" class="headerlink" title="IOC流程图"></a>IOC流程图</h3><ol><li>Bean 的转换过程</li></ol><p>下面这张图演示了一个可用的 bean 是如何从 xml 配置文件中演变过来的。</p><p><a href="http://static.iocoder.cn/365d4142eb23822dcaddba6d1f59ccbc"><img src="http://static.iocoder.cn/365d4142eb23822dcaddba6d1f59ccbc" alt="img"></a></p><ol><li>ApplicationContext 的架构图</li></ol><p><a href="http://static.iocoder.cn/dde0bf4ae9014ec73c80f4c45045850a"><img src="http://static.iocoder.cn/dde0bf4ae9014ec73c80f4c45045850a" alt="img"></a></p><ol><li>load BeanDefinition 的全流程</li></ol><p><a href="http://static.iocoder.cn/38419d23d29c83a4758f73f85281e076"><img src="http://static.iocoder.cn/38419d23d29c83a4758f73f85281e076" alt="img"></a></p><ol><li>get Bean 的全流程</li></ol><p><a href="http://static.iocoder.cn/3a5b28a2d3bd435ca94ea5c8752609d5"><img src="http://static.iocoder.cn/3a5b28a2d3bd435ca94ea5c8752609d5" alt="img"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;架构&quot;&gt;&lt;a href=&quot;#架构&quot; class=&quot;headerlink&quot; title=&quot;架构&quot;&gt;&lt;/a&gt;架构&lt;/h3&gt;&lt;p&gt;Spring Framework&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://static.iocoder.cn/images/Sprin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://example.com/2021/12/01/Docker/"/>
    <id>http://example.com/2021/12/01/Docker/</id>
    <published>2021-11-30T16:02:17.000Z</published>
    <updated>2021-12-06T15:23:18.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Docker是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像；</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>4）、对容器的启动停止就是对软件的启动停止；</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p> 1）、VMWare、VirtualBox（安装）；</p><p> 2）、导入虚拟机文件centos7-atguigu.ova；</p><p> 3）、双击启动linux虚拟机;使用 root/ 123456登陆</p><p> 4）、使用客户端连接linux服务器进行命令操作；</p><p> 5）、设置虚拟机网络；</p><p> 桥接网络===选好网卡====接入网线；</p><p> 6）、设置好网络以后使用命令重启虚拟机的网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure><p> 7）、查看linux的ip地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure><p> 8）、使用客户端连接linux；</p><h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">1、检查内核版本，必须是3.10及以上</span><br><span class="line">uname -r</span><br><span class="line">2、安装docker</span><br><span class="line">yum install docker</span><br><span class="line">3、输入y确认安装</span><br><span class="line">4、启动docker</span><br><span class="line">[root@localhost ~]# systemctl start docker</span><br><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">Docker version 1.12.6, build 3e8e77d&#x2F;1.12.6</span><br><span class="line">5、开机启动docker</span><br><span class="line">[root@localhost ~]# systemctl enable docker</span><br><span class="line">Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;docker.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service.</span><br><span class="line">6、停止docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker search 关键字 eg：docker search redis</td><td>我们经常去docker hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p><p>步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">1、搜索镜像</span><br><span class="line">[root@localhost ~]# docker search tomcat</span><br><span class="line">2、拉取镜像</span><br><span class="line">[root@localhost ~]# docker pull tomcat</span><br><span class="line">3、根据镜像启动容器</span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line">4、docker ps  </span><br><span class="line">查看运行中的容器</span><br><span class="line">5、 停止运行中的容器</span><br><span class="line">docker stop  容器的id</span><br><span class="line">6、查看所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line">7、启动容器</span><br><span class="line">docker start 容器id</span><br><span class="line">8、删除一个容器</span><br><span class="line"> docker rm 容器id</span><br><span class="line">9、启动一个做了端口映射的tomcat</span><br><span class="line">[root@localhost ~]# docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d：后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br><span class="line"></span><br><span class="line">10、为了演示简单关闭了linux的防火墙</span><br><span class="line">service firewalld status ；查看防火墙状态</span><br><span class="line">service firewalld stop：关闭防火墙</span><br><span class="line">11、查看容器的日志</span><br><span class="line">docker logs container-name&#x2F;container-id</span><br><span class="line"></span><br><span class="line">更多命令参看</span><br><span class="line">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;docker&#x2F;</span><br><span class="line">可以参考每一个镜像的文档</span><br><span class="line">docker启动</span><br><span class="line">service docker start</span><br><span class="line">重启docker服务</span><br><span class="line">service docker restart</span><br><span class="line">查看是否启动成功</span><br><span class="line">docker ps -a</span><br><span class="line">启动mysql等容器</span><br><span class="line">docker start mysql</span><br></pre></td></tr></table></figure><h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><p>错误的启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">[root@localhost ~]# docker run --name mysql01 -d mysql</span><br><span class="line">42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846</span><br><span class="line"></span><br><span class="line">mysql退出了</span><br><span class="line">[root@localhost ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES</span><br><span class="line">42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01</span><br><span class="line">538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_</span><br><span class="line">goldstine</span><br><span class="line">c4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi</span><br><span class="line">81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;错误日志</span><br><span class="line">[root@localhost ~]# docker logs 42f09819908b</span><br><span class="line">error: database is uninitialized and password option is not specified </span><br><span class="line">  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</span><br></pre></td></tr></table></figure><p>正确的启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql</span><br><span class="line">b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306&#x2F;tcp            mysql01</span><br></pre></td></tr></table></figure><p>做了端口映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql</span><br><span class="line">ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434</span><br><span class="line">[root@localhost ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">ad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306&#x2F;tcp   mysql02</span><br></pre></td></tr></table></figure><p>几个其他的高级操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CODE</span><br><span class="line">docker run --name mysql03 -v &#x2F;conf&#x2F;mysql:&#x2F;etc&#x2F;mysql&#x2F;conf.d -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag</span><br><span class="line">把主机的&#x2F;conf&#x2F;mysql文件夹挂载到 mysqldocker容器的&#x2F;etc&#x2F;mysql&#x2F;conf.d文件夹里面</span><br><span class="line">改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（&#x2F;conf&#x2F;mysql）</span><br><span class="line"></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw -d mysql:tag --character-set-server&#x3D;utf8mb4 --collation-server&#x3D;utf8mb4_unicode_ci</span><br><span class="line">指定mysql的一些配置参数</span><br></pre></td></tr></table></figure><hr><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>用docker安装nginx的时候报了如下错误：<br>尝试了卸载docker重装，删除nginx，删除nginx镜像文件都没有用，最后发现还是Linux和docker版本兼容问题。</p><p>1、查看你当前的内核版本</p><p>uname -r<br>1<br>2、更新yum包</p><p>sudo yum update<br>1<br>3、卸载已安装的docker（如果安装过的话）</p><p>yum remove docker docker-common docker-selinux docker-engine<br>1<br>4、安装需要的软件包</p><p>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>1<br>5、设置yum源</p><p>sudo yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a><br>1<br>6、可以查看所有仓库中所有docker版本，并选择特定版本安装</p><p>yum list docker-ce –showduplicates | sort -r<br>1<br>7、重新安装docker</p><p>sudo yum install docker-ce<br>1<br>8、启动docker</p><p>sudo systemctl start docker<br>1<br>9、验证安装是否成功</p><p>docker virsion //查看docker的版本<br>docker ps //查看当前正在运行的容器<br>1<br>2<br>10、删除原本装好的nginx容器（如果安装过）</p><p>docker rm nginx(容器名字或者id)<br>1<br>11、删除nginx镜像文件</p><p>docker images //查看镜像文件<br>docker rmi nginx //删除nginx镜像<br>docker rmi -f nginx 强制删除nginx镜像<br>1<br>2<br>3<br>12、重装并启动nginx</p><p>docker run –name nginx -d -p 80:80 nginx<br>1<br>13、安装成功，测试成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; class=&quot;headerlink&quot; title=&quot;1、简介&quot;&gt;&lt;/a&gt;1、简介&lt;/h2&gt;&lt;p&gt;Docker是一个开源的应用容器引擎；是一个轻量级容器技术；&lt;/p&gt;
&lt;p&gt;Docker支持将软件编译成一个镜像；然后在镜像</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch基本操作</title>
    <link href="http://example.com/2021/04/15/ElasticSearch%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/04/15/ElasticSearch%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-04-15T14:33:54.000Z</published>
    <updated>2021-04-16T14:07:33.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch基本操作"><a href="#ElasticSearch基本操作" class="headerlink" title="ElasticSearch基本操作"></a>ElasticSearch基本操作</h1><hr><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><h3 id="1-1、ES核心概念介绍"><a href="#1-1、ES核心概念介绍" class="headerlink" title="1.1、ES核心概念介绍"></a>1.1、ES核心概念介绍</h3><p>初学者建议把es当做数据库学习，es中主要有索引，类型，文档，属性的概念，对应数据库如下：</p><table><thead><tr><th>DB</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库(database)</td><td>索引(indices)</td></tr><tr><td>表(tables)</td><td>类型(types)</td></tr><tr><td>行(rows)</td><td>文档(documents)</td></tr><tr><td>字段(columns)</td><td>属性(fields)</td></tr></tbody></table><h3 id="1-2、分词器介绍"><a href="#1-2、分词器介绍" class="headerlink" title="1.2、分词器介绍"></a>1.2、分词器介绍</h3><p>ElasticSeach默认分词器：keyword(精确)，standard(拆分)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;analyzer&quot;: &quot;keyword&quot;,</span><br><span class="line">&quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">&quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ik分词器(需要引入插件)：ik_smart (粗粒度)和 ik_max_word(细粒度)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">&quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">&quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建议：索引时用ik_max_word尽可能多的分词，而搜索时用ik_smart尽可能提高匹配准度</strong></p><p><strong>扩展：自定义分词器词典</strong></p><p>**在ik分词器config目录下添加自定义词典，修改配置文件 IKAnalyzer.cfg.xml **</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="line">&lt;entry key&#x3D;&quot;ext_dict&quot;&gt;yu.dic&lt;&#x2F;entry&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3、Rest风格介绍"><a href="#1-3、Rest风格介绍" class="headerlink" title="1.3、Rest风格介绍"></a>1.3、Rest风格介绍</h3><p>ES推荐用户使用Restful风格</p><p>基本Rest命令说明：</p><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>创建文档（指定文档id）</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称</td><td>创建文档（随机文档id）</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/文档id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>查询文档通过文档id</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/_search</td><td>查询所有数据</td></tr></tbody></table><hr><h2 id="二、索引操作"><a href="#二、索引操作" class="headerlink" title="二、索引操作"></a>二、索引操作</h2><h3 id="2-1、创建索引"><a href="#2-1、创建索引" class="headerlink" title="2.1、创建索引"></a>2.1、创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT test</span><br></pre></td></tr></table></figure><h3 id="2-2、创建指定类型索引"><a href="#2-2、创建指定类型索引" class="headerlink" title="2.2、创建指定类型索引"></a>2.2、创建指定类型索引</h3><p>es的基本类型有：</p><ul><li>字符串类型<br>text 、 keyword</li><li>数值类型<br>long, integer, short, byte, double, float, half_float, scaled_float</li><li>日期类型<br>date</li><li>布尔值类型<br>boolean</li><li>二进制类型<br>binary  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT test2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;birthday&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、查询索引"><a href="#2-3、查询索引" class="headerlink" title="2.3、查询索引"></a>2.3、查询索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test</span><br></pre></td></tr></table></figure><h3 id="2-4、删除索引"><a href="#2-4、删除索引" class="headerlink" title="2.4、删除索引"></a>2.4、删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE test</span><br></pre></td></tr></table></figure><hr><h2 id="三、文档操作"><a href="#三、文档操作" class="headerlink" title="三、文档操作"></a>三、文档操作</h2><h3 id="3-1、创建文档"><a href="#3-1、创建文档" class="headerlink" title="3.1、创建文档"></a>3.1、创建文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">POST yu&#x2F;user&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;小张&quot;,</span><br><span class="line">  &quot;age&quot;:3,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;帅&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST yu&#x2F;user&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">  &quot;age&quot;:20,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;帅&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST yu&#x2F;user&#x2F;3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;李四&quot;,</span><br><span class="line">  &quot;age&quot;:30,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;唱歌&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST yu&#x2F;user&#x2F;4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;王五&quot;,</span><br><span class="line">  &quot;age&quot;:40,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;跳舞&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、查询文档"><a href="#3-2、查询文档" class="headerlink" title="3.2、查询文档"></a>3.2、查询文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;1</span><br></pre></td></tr></table></figure><h3 id="3-3、修改文档"><a href="#3-3、修改文档" class="headerlink" title="3.3、修改文档"></a>3.3、修改文档</h3><p>修改一号用户年龄为5岁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#PUT修改</span><br><span class="line">PUT yu&#x2F;user&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;小张&quot;,</span><br><span class="line">  &quot;age&quot;:5,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;帅&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#POST修改</span><br><span class="line">POST yu&#x2F;user&#x2F;1&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;age&quot;:5</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PUT修改和POST修改区别：PUT会将json数据都进行替换, 而POST只会更新修改字段的值，POST更加灵活，一般推荐POST</strong></p><h3 id="3-4、删除文档"><a href="#3-4、删除文档" class="headerlink" title="3.4、删除文档"></a>3.4、删除文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE yu&#x2F;user&#x2F;1</span><br></pre></td></tr></table></figure><hr><p>**扩展： 通过GET _cat/ 可以获得es的当前的很多信息！ 通过GET _cat/indices命令 查看elasticsearch 索引情况！  **</p><hr><h3 id="3-5、复杂查询-重点"><a href="#3-5、复杂查询-重点" class="headerlink" title="3.5、复杂查询(重点)"></a>3.5、复杂查询(重点)</h3><h4 id="3-5-1-、条件匹配查询"><a href="#3-5-1-、条件匹配查询" class="headerlink" title="3.5.1 、条件匹配查询"></a>3.5.1 、条件匹配查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search?q&#x3D;name:张三</span><br><span class="line"></span><br><span class="line">#查询一个条件一个值去匹配</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#查询一个条件多个值去匹配</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三 李四&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-2、自定义查询输出结果"><a href="#3-5-2、自定义查询输出结果" class="headerlink" title="3.5.2、自定义查询输出结果"></a>3.5.2、自定义查询输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;age&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-3、排序"><a href="#3-5-3、排序" class="headerlink" title="3.5.3、排序"></a>3.5.3、排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-4、分页"><a href="#3-5-4、分页" class="headerlink" title="3.5.4、分页"></a>3.5.4、分页</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-4、多条件匹配查询"><a href="#3-5-4、多条件匹配查询" class="headerlink" title="3.5.4、多条件匹配查询"></a>3.5.4、多条件匹配查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#and查询，must相当于and</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#or查询，should相当于or</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 30</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#not查询，must_not相当于not</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 30</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-5、过滤查询"><a href="#3-5-5、过滤查询" class="headerlink" title="3.5.5、过滤查询"></a>3.5.5、过滤查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 10,</span><br><span class="line">              &quot;lte&quot;: 20</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-6、精确查询-term"><a href="#3-5-6、精确查询-term" class="headerlink" title="3.5.6、精确查询(term)"></a>3.5.6、精确查询(term)</h4><p><strong>term 查询是直接通过倒排索引指定的词条进程精确查找的  !</strong></p><p><strong>text类型会被拆分，而keyword类型不会</strong></p><p> 准备数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#创建索引</span><br><span class="line">PUT termdb</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;birth&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#创建文档</span><br><span class="line">PUT termdb&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;小张&quot;,</span><br><span class="line">  &quot;birth&quot;:&quot;1997-09-14&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#创建文档</span><br><span class="line">PUT termdb&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">  &quot;birth&quot;:&quot;1997-10-15&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#查询keyword类型的：只会查出来一条</span><br><span class="line">GET termdb&#x2F;_doc&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#查询text类型的：会查出来多条</span><br><span class="line">GET termdb&#x2F;_doc&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;birth&quot;: &quot;1997&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：当用term查询一个text类型时，term无法对其精确匹配的 ，查询条件缩小(值为：张三，查询条件：张)会分词查询</strong></p><h4 id="3-5-7、高亮查询"><a href="#3-5-7、高亮查询" class="headerlink" title="3.5.7、高亮查询"></a>3.5.7、高亮查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定制高亮属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;:&#123;</span><br><span class="line">    &quot;pre_tags&quot;: &quot;&lt;p style&#x3D;&#39;color:red&#39;&gt;&quot;,</span><br><span class="line">    &quot;post_tags&quot;: &quot;&lt;&#x2F;p&gt;&quot;, </span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、Springboot整合ElasticSearch"><a href="#四、Springboot整合ElasticSearch" class="headerlink" title="四、Springboot整合ElasticSearch"></a>四、Springboot整合ElasticSearch</h2><p>可参考elasticSearch官网：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html</a></p><h3 id="4-1、添加依赖"><a href="#4-1、添加依赖" class="headerlink" title="4.1、添加依赖"></a>4.1、添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>若es本地版本和springboot默认es版本不一致，需要自定义版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;!--自定义elasticSearch版本--&gt;</span><br><span class="line">&lt;elasticsearch.version&gt;7.12.0&lt;&#x2F;elasticsearch.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2、注册RestHighLevelClient-对象"><a href="#4-2、注册RestHighLevelClient-对象" class="headerlink" title="4.2、注册RestHighLevelClient 对象"></a>4.2、注册RestHighLevelClient 对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ElasticSearchConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RestHighLevelClient restHighLevelClient() &#123;</span><br><span class="line">        RestHighLevelClient client &#x3D; new RestHighLevelClient(</span><br><span class="line">                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));</span><br><span class="line">        return client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3、RestHighLevelClient对象操作索引"><a href="#4-3、RestHighLevelClient对象操作索引" class="headerlink" title="4.3、RestHighLevelClient对象操作索引"></a>4.3、RestHighLevelClient对象操作索引</h3><p>先注入RestHighLevelClient对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">RestHighLevelClient restHighLevelClient;</span><br></pre></td></tr></table></figure><h4 id="4-3-1、创建索引"><a href="#4-3-1、创建索引" class="headerlink" title="4.3.1、创建索引"></a>4.3.1、创建索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void createIndices() throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F;创建索引请求</span><br><span class="line">    CreateIndexRequest createIndexRequest &#x3D; new CreateIndexRequest(&quot;java_indices&quot;);</span><br><span class="line">    &#x2F;&#x2F;客户端执行请求</span><br><span class="line">    CreateIndexResponse response &#x3D; restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2、查询索引"><a href="#4-3-2、查询索引" class="headerlink" title="4.3.2、查询索引"></a>4.3.2、查询索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判断索引是否存在</span><br><span class="line">@Test</span><br><span class="line">void isExistIndices() throws IOException &#123;</span><br><span class="line">    GetIndexRequest getIndexRequest &#x3D; new GetIndexRequest(&quot;java_indices&quot;);</span><br><span class="line">    boolean exists &#x3D; restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3、删除索引"><a href="#4-3-3、删除索引" class="headerlink" title="4.3.3、删除索引"></a>4.3.3、删除索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void deleteIndices() throws IOException &#123;</span><br><span class="line">    DeleteIndexRequest deleteIndexRequest &#x3D; new DeleteIndexRequest(&quot;java_indices&quot;);</span><br><span class="line">    AcknowledgedResponse acknowledgedResponse &#x3D; restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(acknowledgedResponse.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-4、RestHighLevelClient对象操作文档"><a href="#4-4、RestHighLevelClient对象操作文档" class="headerlink" title="4.4、RestHighLevelClient对象操作文档"></a>4.4、RestHighLevelClient对象操作文档</h3><h4 id="4-4-1、创建文档"><a href="#4-4-1、创建文档" class="headerlink" title="4.4.1、创建文档"></a>4.4.1、创建文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void createDocument() throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F;创建请求并指定索引</span><br><span class="line">    IndexRequest request &#x3D; new IndexRequest(&quot;java_indices&quot;);</span><br><span class="line">    request.id(&quot;1&quot;); &#x2F;&#x2F; 设置ID</span><br><span class="line">    request.timeout(&quot;1s&quot;); &#x2F;&#x2F; 设置超时时间</span><br><span class="line">    request.source(JSON.toJSONString(new User(&quot;张三&quot;, 20)), XContentType.JSON); &#x2F;&#x2F;设置数据</span><br><span class="line">    &#x2F;&#x2F;客户端发送请求</span><br><span class="line">    IndexResponse response &#x3D; restHighLevelClient.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2、查询文档"><a href="#4-4-2、查询文档" class="headerlink" title="4.4.2、查询文档"></a>4.4.2、查询文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;根据ID获取指定索引的文档信息，判断是否存在</span><br><span class="line">@Test</span><br><span class="line">void getDocument() throws IOException &#123;</span><br><span class="line">    GetRequest request &#x3D; new GetRequest(&quot;java_indices&quot;, &quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F;request.id(&quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F;判断指定的索引和id是否存在</span><br><span class="line">    boolean exists &#x3D; restHighLevelClient.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">    &#x2F;&#x2F;获取指定的id信息</span><br><span class="line">    GetResponse response &#x3D; restHighLevelClient.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.getSourceAsString());</span><br><span class="line">    &#x2F;&#x2F;System.out.println(response.isExists());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-3、更新文档"><a href="#4-4-3、更新文档" class="headerlink" title="4.4.3、更新文档"></a>4.4.3、更新文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;更新文档(Update)，重新插入同一个id的数据也是更新(PUT操作)</span><br><span class="line">@Test</span><br><span class="line">void updateDocument() throws IOException &#123;</span><br><span class="line">    UpdateRequest request &#x3D; new UpdateRequest(&quot;java_indices&quot;, &quot;1&quot;);</span><br><span class="line">    request.timeout(&quot;1s&quot;);</span><br><span class="line">    &#x2F;&#x2F;封装需要更新的文档信息</span><br><span class="line">    request.doc(JSON.toJSONString(new User(&quot;小张&quot;, 10)), XContentType.JSON);</span><br><span class="line">    UpdateResponse response &#x3D; restHighLevelClient.update(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-4、删除文档"><a href="#4-4-4、删除文档" class="headerlink" title="4.4.4、删除文档"></a>4.4.4、删除文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void deleteDocument() throws IOException &#123;</span><br><span class="line">    DeleteRequest request &#x3D; new DeleteRequest(&quot;java_indices&quot;, &quot;1&quot;);</span><br><span class="line">    request.timeout(&quot;1s&quot;);</span><br><span class="line">    DeleteResponse response &#x3D; restHighLevelClient.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-5、批量插入文档"><a href="#4-4-5、批量插入文档" class="headerlink" title="4.4.5、批量插入文档"></a>4.4.5、批量插入文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void batchCreateDocument() throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F;创建批量的请求</span><br><span class="line">    BulkRequest bulkRequest &#x3D; new BulkRequest();</span><br><span class="line">    bulkRequest.timeout(&quot;10s&quot;);</span><br><span class="line">    List&lt;User&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">        User user &#x3D; new User(&quot;张三&quot; + i, 20 + i);</span><br><span class="line">        list.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;遍历list，把多条数据放到BulkRequest中</span><br><span class="line">    for (int i &#x3D; 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">        IndexRequest indexRequest &#x3D; new IndexRequest(&quot;java_indices&quot;);</span><br><span class="line">        indexRequest.id(&quot;&quot; + i);</span><br><span class="line">        indexRequest.source(JSON.toJSONString(list.get(i)), XContentType.JSON);</span><br><span class="line">        bulkRequest.add(indexRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;客户端执行批量操作</span><br><span class="line">    BulkResponse responses &#x3D; restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(responses.hasFailures()); &#x2F;&#x2F;是否失败，如果false则表示全部成功</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-6、文档复杂查询和高亮"><a href="#4-4-6、文档复杂查询和高亮" class="headerlink" title="4.4.6、文档复杂查询和高亮"></a>4.4.6、文档复杂查询和高亮</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void searchDocument() throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F;创建批量搜索请求</span><br><span class="line">    SearchRequest request &#x3D; new SearchRequest(&quot;java_indices&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;构建搜索条件</span><br><span class="line">    SearchSourceBuilder searchSourceBuilder &#x3D; new SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查询条件，可以通过 QueryBuilders 工具来实现</span><br><span class="line">    &#x2F;&#x2F;当中文查询时，如果使用ik分词器会查询不到数据，属性需要使用xxx.keyword才能查询到数据</span><br><span class="line">    &#x2F;&#x2F;TermQueryBuilder termQuery &#x3D; QueryBuilders.termQuery(&quot;name.keyword&quot;, &quot;张三1&quot;);&#x2F;&#x2F;精确查询</span><br><span class="line">    MatchQueryBuilder matchQuery &#x3D; QueryBuilders.matchQuery(&quot;name&quot;, &quot;张三&quot;); &#x2F;&#x2F;模糊查询</span><br><span class="line">    &#x2F;&#x2F;BoolQueryBuilder boolQuery &#x3D; QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(&quot;name&quot;, &quot;张三&quot;)); &#x2F;&#x2F;多条件查询</span><br><span class="line"></span><br><span class="line">    searchSourceBuilder.query(matchQuery); &#x2F;&#x2F;查询</span><br><span class="line">    searchSourceBuilder.sort(&quot;age&quot;, SortOrder.ASC); &#x2F;&#x2F;排序</span><br><span class="line">    searchSourceBuilder.from(0); &#x2F;&#x2F;分页起始</span><br><span class="line">    searchSourceBuilder.size(5); &#x2F;&#x2F;分页一页显示的数量</span><br><span class="line">    searchSourceBuilder.timeout(TimeValue.timeValueSeconds(1)); &#x2F;&#x2F;设置超时时间</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建高亮生成器</span><br><span class="line">    HighlightBuilder highlightBuilder &#x3D; new HighlightBuilder();</span><br><span class="line">    highlightBuilder.field(&quot;name&quot;);</span><br><span class="line">    highlightBuilder.preTags(&quot;&lt;p style&#x3D;&#39;color:red&#39;&gt;&quot;);</span><br><span class="line">    highlightBuilder.postTags(&quot;&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">    &#x2F;&#x2F;设置高亮</span><br><span class="line">    searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将查询条件放入搜索请求request中</span><br><span class="line">    request.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;客户端执行请求</span><br><span class="line">    SearchResponse response &#x3D; restHighLevelClient.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(JSON.toJSONString(response.getHits()));</span><br><span class="line">    &#x2F;&#x2F;遍历Hits</span><br><span class="line">    for (SearchHit hit : response.getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticSearch基本操作&quot;&gt;&lt;a href=&quot;#ElasticSearch基本操作&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch基本操作&quot;&gt;&lt;/a&gt;ElasticSearch基本操作&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JSON对象转化</title>
    <link href="http://example.com/2021/03/10/JSON%E5%AF%B9%E8%B1%A1%E8%BD%AC%E5%8C%96/"/>
    <id>http://example.com/2021/03/10/JSON%E5%AF%B9%E8%B1%A1%E8%BD%AC%E5%8C%96/</id>
    <published>2021-03-10T14:10:23.000Z</published>
    <updated>2021-04-16T14:07:30.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON对象转化"><a href="#JSON对象转化" class="headerlink" title="JSON对象转化"></a>JSON对象转化</h1><hr><p>在JSON对象转化问题，一般用的较多的是Jackson和fastjson</p><h2 id="一：Jackson简单用法"><a href="#一：Jackson简单用法" class="headerlink" title="一：Jackson简单用法"></a>一：Jackson简单用法</h2><p>Jackson依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.12.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="1、对象转json"><a href="#1、对象转json" class="headerlink" title="1、对象转json"></a>1、对象转json</h3><p>第一步：创建Jackson的核心对象 ObjectMapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper &#x3D; new ObjectMapper();</span><br></pre></td></tr></table></figure><p>第二步：使用转换方法</p><p>常用的有：</p><p>1、writeValue(参数一，参数二)；</p><p>参数一：</p><p>　　(1) File：将obj对象转换为JSON字符串，并保存到指定的文件中</p><p>　　(2) Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中(通常可以使用respon的getWrite()方法，获取该类)</p><p>　　(3) OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</p><p>参数二：</p><p>　　要转换为JSON的对象　</p><p>2、**writeValueAsString(Object obj)**：将对象转为json字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user &#x3D; new User(&quot;张三&quot;, &quot;男&quot;, &quot;2000-01-01&quot;);</span><br><span class="line">String json &#x3D; mapper.writeValueAsString(user);</span><br></pre></td></tr></table></figure><h3 id="2、json转对象"><a href="#2、json转对象" class="headerlink" title="2、json转对象"></a>2、json转对象</h3><p><strong>readValue(参数一，参数二)</strong></p><p>参数一：从那读取对象</p><p>参数二：要转换为的对象：object类型　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper &#x3D; new ObjectMapper();</span><br><span class="line">&#x2F;&#x2F;1.JSON字符串转对象</span><br><span class="line">String json &#x3D; &quot;&#123;\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;sex\&quot;:\&quot;男\&quot;,\&quot;birthday\&quot;:\&quot;2000-01-01\&quot;&#125;&quot;;</span><br><span class="line">User user &#x3D; mapper.readValue(json, User.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.json字符串转map</span><br><span class="line">Map map &#x3D; mapper.readValue(json, Map.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.从file中读取转对象</span><br><span class="line">File file &#x3D; new File(&quot;data&#x2F;user.json&quot;);</span><br><span class="line">User user &#x3D; mapper.readValue(file, user.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.从URL中读取转对象</span><br><span class="line">URL url &#x3D; new URL(&quot;file:data&#x2F;user.json&quot;);</span><br><span class="line">User user &#x3D; mapper.readValue(url, user.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;5.从InputStream读取转对象</span><br><span class="line">InputStream input &#x3D; new FileInputStream(&quot;data&#x2F;user.json&quot;);</span><br><span class="line">User user &#x3D; mapper.readValue(input, user.class);</span><br></pre></td></tr></table></figure><h3 id="3、JackSon的常用注解"><a href="#3、JackSon的常用注解" class="headerlink" title="3、JackSon的常用注解"></a>3、JackSon的常用注解</h3><p>JackSon提供了一些的注解，可以用在类上或者是在字段上。通常是数据绑定的时候使用。下面几个是最常用的几个</p><p><strong>@JsonInclude(JsonInclude.Include.NON_EMPTY)</strong></p><p>仅在属性不为空时序列化此字段，对于字符串，即null或空字符串</p><p><strong>@JsonIgnore</strong></p><p>在json序列化时将java bean中的一些属性忽略掉，序列化和反序列化都受影响，一般标记在属性或者方法上</p><p><strong>@JsonProperty(value = “user_name”)</strong></p><p>指定序列化时的字段名(把属性的名称序列化成另外一个名称)，默认使用属性名，一般作用于属性上</p><h2 id="二：fastJson简单用法"><a href="#二：fastJson简单用法" class="headerlink" title="二：fastJson简单用法"></a>二：fastJson简单用法</h2><p>fastjson依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.75&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>fastJson源码中可以发现主要的3个类，JSON,JSONArray，JSONObject</p><p>三者之间的关系是：<strong>JSONObject和JSONArray继承JSON</strong>，</p><p>JSONObject相当于Map，JSONObject的数据是用 {  } 来表示的</p><p>JSONArray相当于List，是由JSONObject构成的数组，用  [ { } , { } , ……  , { } ]  来表示</p><h3 id="1、json字符串与对象之间的转换"><a href="#1、json字符串与对象之间的转换" class="headerlink" title="1、json字符串与对象之间的转换"></a>1、json字符串与对象之间的转换</h3><p>主要方法是 <strong>JSON.toJSONString</strong> 和 <strong>JSON.parseObject</strong></p><ul><li>序列化:<br>String jsonString = JSON.toJSONString(obj);</li><li>反序列化:<br>VO vo = JSON.parseObject(“jsonString”, VO.class);</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对象转字符串</span><br><span class="line">User user &#x3D; new User(&quot;张三&quot;, &quot;男&quot;, &quot;2000-01-01&quot;);</span><br><span class="line">String jsonString &#x3D; JSON.toJSONString(user);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串转对象</span><br><span class="line">User user &#x3D; JSON.parseObject(jsonString, User.class);</span><br></pre></td></tr></table></figure><h3 id="2、json数组字符串与对象数组之间的转换"><a href="#2、json数组字符串与对象数组之间的转换" class="headerlink" title="2、json数组字符串与对象数组之间的转换"></a>2、json数组字符串与对象数组之间的转换</h3><p>主要方法是 <strong>JSON.toJSONString</strong> 和 <strong>JSON.parseArray</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建对象集合</span><br><span class="line">List&lt;User&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (int i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;</span><br><span class="line">list.add(new User(&quot;张三&quot;+ i +&quot;号&quot;, &quot;男&quot;, &quot;2000-01-01&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;list转json</span><br><span class="line">String jsonString &#x3D; JSONObject.toJSONString(list);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;json数组字符串转对象集合</span><br><span class="line">List&lt;User&gt; users &#x3D; JSONObject.parseArray(jsonString, User.class);</span><br></pre></td></tr></table></figure><h3 id="3、获取json字符串中的某个字段"><a href="#3、获取json字符串中的某个字段" class="headerlink" title="3、获取json字符串中的某个字段"></a>3、获取json字符串中的某个字段</h3><p>需要先转化为 <strong>JSONObject</strong> 对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对象转JSONObject对象</span><br><span class="line">User user &#x3D; new User(&quot;张三&quot;, &quot;男&quot;, &quot;2000-01-01&quot;);</span><br><span class="line">JSONObject jsonObject &#x3D; (JSONObject) JSON.toJSON(user);</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">JSONObject jsonObject &#x3D; (JSONObject) JSONObject.toJSON(user);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串转JSONObject对象</span><br><span class="line">String json &#x3D; &quot;&#123;\&quot;birthday\&quot;:\&quot;2000-01-01\&quot;,\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;sex\&quot;:\&quot;男\&quot;,\&quot;grade\&quot;:80&#125;&quot;;</span><br><span class="line">JSONObject jsonObject &#x3D; JSON.parseObject(json);</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">JSONObject jsonObject &#x3D; JSONObject.parseObject(json);</span><br></pre></td></tr></table></figure><p>再使用 <strong>JSONObject</strong> 对象的一系列 <strong>get</strong> 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name &#x3D; jsonObject.getString(&quot;name&quot;);</span><br><span class="line">Integer grade &#x3D; jsonObject.getInteger(&quot;grade&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSON对象转化&quot;&gt;&lt;a href=&quot;#JSON对象转化&quot; class=&quot;headerlink&quot; title=&quot;JSON对象转化&quot;&gt;&lt;/a&gt;JSON对象转化&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;在JSON对象转化问题，一般用的较多的是Jackson和fastjson&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="http://example.com/2021/01/01/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2021/01/01/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</id>
    <published>2021-01-01T08:00:00.000Z</published>
    <updated>2021-01-01T08:58:43.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown常用语法"><a href="#Markdown常用语法" class="headerlink" title="Markdown常用语法"></a>Markdown常用语法</h1><hr><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><h3 id="1-使用-表示标题，其中-号必须在行首，中间必须一个空格，-个数表示是几级标题，例如："><a href="#1-使用-表示标题，其中-号必须在行首，中间必须一个空格，-个数表示是几级标题，例如：" class="headerlink" title="1. 使用 # 表示标题，其中 # 号必须在行首，中间必须一个空格，#个数表示是几级标题，例如："></a>1. 使用 <code>#</code> 表示标题，其中 <code>#</code> 号必须在行首，中间必须一个空格，<code>#</code>个数表示是几级标题，例如：</h3><h1 id="一号标题"><a href="#一号标题" class="headerlink" title="一号标题"></a>一号标题</h1><h2 id="二号标题"><a href="#二号标题" class="headerlink" title="二号标题"></a>二号标题</h2><h3 id="三号标题"><a href="#三号标题" class="headerlink" title="三号标题"></a>三号标题</h3><h4 id="四号标题"><a href="#四号标题" class="headerlink" title="四号标题"></a>四号标题</h4><h5 id="五号标题"><a href="#五号标题" class="headerlink" title="五号标题"></a>五号标题</h5><h6 id="六号标题"><a href="#六号标题" class="headerlink" title="六号标题"></a>六号标题</h6><h3 id="2-在字段下一行输入-表示一级标题，-表示二级标题，例如："><a href="#2-在字段下一行输入-表示一级标题，-表示二级标题，例如：" class="headerlink" title="2. 在字段下一行输入=== 表示一级标题，--- 表示二级标题，例如："></a>2. 在字段下一行输入<code>===</code> 表示一级标题，<code>---</code> 表示二级标题，例如：</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="扩展：分割线"><a href="#扩展：分割线" class="headerlink" title="扩展：分割线"></a>扩展：分割线</h3><p>使用三个或以上的 <code>-</code> 或者 <code>*</code> 表示，且这一行只有符号，<strong>注意不要被识别为二级标题即可</strong>，例如中间或者前面可以加空格</p><hr><hr><h2 id="二、斜体和粗体"><a href="#二、斜体和粗体" class="headerlink" title="二、斜体和粗体"></a>二、斜体和粗体</h2><p>使用 <code>*</code> 和 <code>**</code> 分别表示斜体和粗体，例如</p><p><em>斜体</em> <strong>粗体</strong> <strong><em>又斜又粗</em></strong></p><h4 id="扩展：删除线使用两个-表示，例如"><a href="#扩展：删除线使用两个-表示，例如" class="headerlink" title="扩展：删除线使用两个 ~ 表示，例如"></a><strong>扩展：</strong>删除线使用两个 <code>~</code> 表示，例如</h4><p><del>我是要删掉的文字</del></p><hr><h2 id="三、超链接和图片"><a href="#三、超链接和图片" class="headerlink" title="三、超链接和图片"></a>三、超链接和图片</h2><p>超链接和图片的写法类似，图片仅在超链接前多了一个 <code>!</code> ，超链接是 [文字描述] (链接)，图片是![文字描述] (图片路径)，如：</p><p>超链接：<a href="www.baidu.com">百度</a></p><p>图片：<img src="//www.baidu.com/img/2020dong_36ab26b0975e2a69e81f707084a9e7e8.gif"></p><hr><h2 id="四、行内代码块"><a href="#四、行内代码块" class="headerlink" title="四、行内代码块"></a>四、行内代码块</h2><p>其实上面已经用过很多次了，即使用 ``` 表示，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">行内代码块</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        System.out.println( <span class="string">&quot;Hello, World!&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意：很多字符是需要转义，使用反斜杠-进行转义"><a href="#注意：很多字符是需要转义，使用反斜杠-进行转义" class="headerlink" title="注意：很多字符是需要转义，使用反斜杠 \ 进行转义"></a>注意：很多字符是需要转义，使用反斜杠 <code>\</code> 进行转义</h3><hr><h2 id="五、无序列表"><a href="#五、无序列表" class="headerlink" title="五、无序列表"></a>五、无序列表</h2><p>使用 <code>-</code>、<code>+</code> 和 <code>*</code> (后面有个空格) 表示无序列表，前后留一行空白，可嵌套，例如</p><p>无序列表</p><ul><li>一层<ul><li>二层</li><li>二层<ul><li>三层<ul><li>四层</li></ul></li></ul></li></ul></li><li>一层</li></ul><hr><h2 id="六、有序列表"><a href="#六、有序列表" class="headerlink" title="六、有序列表"></a>六、有序列表</h2><p>使用 <code>数字. </code>（点号后面有个空格）表示有序列表，可嵌套，例如</p><p>有序列表</p><ol><li>一层<ol><li>二层</li><li>二层</li></ol></li><li>一层</li></ol><hr><h2 id="七、文字引用"><a href="#七、文字引用" class="headerlink" title="七、文字引用"></a>七、文字引用</h2><p>使用 <code>&gt;</code> (后面有个空格) 表示，可以有多个 <code>&gt;</code>，表示层级更深，例如</p><blockquote><p>第一层</p><blockquote><p>第二层 这样是跳不出去的</p><blockquote><p>还可以更深</p></blockquote></blockquote></blockquote><blockquote><p>这样就跳出去了</p></blockquote><hr><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>直接看例子吧，第二行的 <code>---:</code> 表示了对齐方式，默认<strong>左对齐</strong>，还有<strong>右对齐</strong>和<strong>居中</strong></p><table><thead><tr><th>商品</th><th>数量</th><th>单价</th></tr></thead><tbody><tr><td>手机</td><td>1</td><td>$1000</td></tr><tr><td>电脑</td><td>1</td><td>$1999</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown常用语法&quot;&gt;&lt;a href=&quot;#Markdown常用语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown常用语法&quot;&gt;&lt;/a&gt;Markdown常用语法&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo搭建</title>
    <link href="http://example.com/2020/12/30/hexo%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/12/30/hexo%E6%90%AD%E5%BB%BA/</id>
    <published>2020-12-29T16:02:17.000Z</published>
    <updated>2020-12-30T12:00:19.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h3><hr><h4 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h4><p> 官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><h4 id="2、安装hexo"><a href="#2、安装hexo" class="headerlink" title="2、安装hexo"></a>2、安装hexo</h4><p>cmd输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="3、创建hexo项目"><a href="#3、创建hexo项目" class="headerlink" title="3、创建hexo项目"></a>3、创建hexo项目</h4><p>新建hexo文件夹，打开git bash，一步步输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">hexo init</span><br><span class="line">&#x2F;&#x2F;安装依赖</span><br><span class="line">npm install</span><br><span class="line">&#x2F;&#x2F;生成文件</span><br><span class="line">hexo g</span><br><span class="line">&#x2F;&#x2F;开启服务</span><br><span class="line">hexo s</span><br><span class="line">&#x2F;&#x2F;本地启动</span><br><span class="line">http:&#x2F;&#x2F;localhost:4000</span><br></pre></td></tr></table></figure><h4 id="4、GitHub创建仓库"><a href="#4、GitHub创建仓库" class="headerlink" title="4、GitHub创建仓库"></a>4、GitHub创建仓库</h4><p>在github上创建一个和你用户名相同的仓库，<a href="http://后面加.github.io/">后面加.github.io</a></p><h4 id="5、将hexo部署到GitHub"><a href="#5、将hexo部署到GitHub" class="headerlink" title="5、将hexo部署到GitHub"></a>5、将hexo部署到GitHub</h4><p>打开项目根目录配置文件 <code>_config.yml</code>，翻到最后，修改为如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>需要先安装deploy-git部署命令，才可以用命令部署到GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo generate  或者  hexo g</span><br><span class="line">hexo deploy   或者  hexo d</span><br><span class="line">&#x2F;&#x2F;如果需要本地执行</span><br><span class="line">hexo server 或者 hexo s</span><br></pre></td></tr></table></figure><hr><h4 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h4><p>进入hexo文件夹，打开git bash输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 博客名称</span><br></pre></td></tr></table></figure><p>会在source文件中生成XXX.md，通过Typora打开编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>生成并发布</p><p>本地 ：<a href="http://localhost:4000/">http://localhost:4000</a></p><p>外网 ：https://你的github名字.github.io/</p><hr><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>用我的主题为例：butterfly</p><p>进入项目根目录，打开git bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p>修改根目录配置文件_config.yml，把主题改为butterfly</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme:  butterfly</span><br></pre></td></tr></table></figure><p>遇到的问题：extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug </p><p>解决方法：执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;清除缓存</span><br><span class="line">hexo clean</span><br><span class="line">&#x2F;&#x2F;重新生成静态文件</span><br><span class="line">hexo g</span><br><span class="line">&#x2F;&#x2F;发布</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>完成！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Hexo搭建&quot;&gt;&lt;a href=&quot;#Hexo搭建&quot; class=&quot;headerlink&quot; title=&quot;Hexo搭建&quot;&gt;&lt;/a&gt;Hexo搭建&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;1、安装Node-js&quot;&gt;&lt;a href=&quot;#1、安装Node-js&quot; class=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git大全</title>
    <link href="http://example.com/2020/12/29/git%E5%A4%A7%E5%85%A8/"/>
    <id>http://example.com/2020/12/29/git%E5%A4%A7%E5%85%A8/</id>
    <published>2020-12-29T14:33:54.000Z</published>
    <updated>2020-12-29T14:41:15.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GIT命令使用大全"><a href="#GIT命令使用大全" class="headerlink" title="GIT命令使用大全"></a>GIT命令使用大全</h1><p>查看配置：git config -l</p><p>查看系统配置：git config –system –-list</p><p>查看当前用户（global）配置：git config –global  –list</p><p>配置账号：</p><p> git config –global user.name “your name”<br> git config –global user.email “<a href="mailto:&#x79;&#111;&#117;&#x72;&#x5f;&#101;&#x6d;&#97;&#x69;&#108;&#64;&#x79;&#x6f;&#117;&#x72;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#x79;&#111;&#117;&#x72;&#x5f;&#101;&#x6d;&#97;&#x69;&#108;&#64;&#x79;&#x6f;&#117;&#x72;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>“</p><p>配置SSH：</p><p>1.如果没有SSH Key，则需要先生成一下：ssh-keygen -t rsa -C “注册github的邮箱”</p><p>2.执行之后继续执行以下命令来获取SSH Key：cd ~/.ssh</p><p>3.复制公钥在github中设置</p><p>4.验证：ssh -T <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>     //运行结果出现类似如下Hi ygsit! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p><strong>提交代码：</strong></p><p>查看文件状态：git status</p><p>克隆：git clone url</p><p>git status                                 查看状态<br>git add .                               添加到暂存区<br>git commit -m “提交内容描述”                提交代码<br>git pull origin 分支名                      更新代码（当只有一个分支的时候可以直接git pull)<br>git push origin 分支名                   提交到远程（当只有一个分支的时候可以直接git push）</p><p>$ git reset [file]            还原暂存区的文件，并保存修改</p><p>$ git reset –hard        还原暂存区的文件，并把原来修改的删除</p><p>git commit –amend                                    修改提交的描述内容（vim修改）</p><p>git commit –amend -m “新提交信息”         直接修改提交描述内容</p><p>git reset –soft head^1      还原提交的文件，并保存修改</p><p>git reset –hard head^1     还原提交的文件，并把原来修改的删除</p><p><strong>git clone 和 git pull 区别：（clone拉取代码，pull更新代码）</strong></p><p>git clone：从远程服务器克隆一个一模一样的版本库到本地,复制的是整个版本库，叫做clone.（是将整个工程复制下来所以，不需要本地是仓库（没有.git文件夹））</p><p>git pull：从远程服务器获取到一个branch分支的更新到本地，并更新本地库，叫做pull.（本地有代码会更新，没有需要先初始化本地文件夹文一个仓库（git init））</p><p><strong>回退版本</strong>：</p><p>在一个分支中</p><p>git reset –soft head~1   回退并保存修改</p><p>git reset –hard head~1   回退不保存修改</p><p>1表示回退1个版本</p><p>2表示回退2个版本</p><p>回退到某个版本</p><p>git reset –soft 4e60fa983f23ff1ed5ec99f2c0cd4c4e4bf1e1d1（version code）</p><p>git reset –hard 4e60fa983f23ff1ed5ec99f2c0cd4c4e4bf1e1d1（version code）</p><p><strong>分支命令：</strong></p><p>查看所有本地分支：git branch </p><p>查看所有远程分支：git branch -r</p><p>查看所有本地分支和远程分支：git branch -a</p><p>创建分支：git branch 分支名  （复制当前分支到新创建的分支）</p><p>切换分支：git checkout 分支名</p><p>切换到上一个分支：git checkout -</p><p>创建并切换分支：git checkout -b 分支名 （相当于创建分支和切换分支的组合命令）</p><p>提交本地分支到远程仓库：git push origin 本地分支名</p><p>合并指定分支到当前分支：git merge 分支名</p><p>删除本地分支：git branch -d 本地分支名 （删除分支必须不在此分支下，删除本地分支后再切换到该删除的分支，会从远程拉取并自动创建本地分支）</p><p>删除远程分支：git push origin –delete 远程分支名</p><p><strong>冲突</strong>：</p><p>别人在更新代码 push冲突时  先pull一下</p><p>git pull 出现vi编辑时 按esc 跳到命令模式shift+ :wq!(保存强制退出) </p><p>如过merge成功 git界面无异常   否者需要解决冲突</p><p><strong>关联远程仓库</strong>：</p><p>git init</p><p>git add .</p><p>git commit -m “First commit”</p><p>git remote add origin 远程仓库路径(<a href="https://github.com/ygsit/test.git">https://github.com/ygsit/test.git</a>)</p><p>git push origin master或者git push -u origin master(加了-u，表示后面提交可以用git push代替git push origin master)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GIT命令使用大全&quot;&gt;&lt;a href=&quot;#GIT命令使用大全&quot; class=&quot;headerlink&quot; title=&quot;GIT命令使用大全&quot;&gt;&lt;/a&gt;GIT命令使用大全&lt;/h1&gt;&lt;p&gt;查看配置：git config -l&lt;/p&gt;
&lt;p&gt;查看系统配置：git confi</summary>
      
    
    
    
    
  </entry>
  
</feed>
