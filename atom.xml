<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-16T14:07:33.238Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch基本操作</title>
    <link href="http://example.com/2021/04/15/ElasticSearch%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/04/15/ElasticSearch%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-04-15T14:33:54.000Z</published>
    <updated>2021-04-16T14:07:33.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch基本操作"><a href="#ElasticSearch基本操作" class="headerlink" title="ElasticSearch基本操作"></a>ElasticSearch基本操作</h1><hr><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><h3 id="1-1、ES核心概念介绍"><a href="#1-1、ES核心概念介绍" class="headerlink" title="1.1、ES核心概念介绍"></a>1.1、ES核心概念介绍</h3><p>初学者建议把es当做数据库学习，es中主要有索引，类型，文档，属性的概念，对应数据库如下：</p><table><thead><tr><th>DB</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>数据库(database)</td><td>索引(indices)</td></tr><tr><td>表(tables)</td><td>类型(types)</td></tr><tr><td>行(rows)</td><td>文档(documents)</td></tr><tr><td>字段(columns)</td><td>属性(fields)</td></tr></tbody></table><h3 id="1-2、分词器介绍"><a href="#1-2、分词器介绍" class="headerlink" title="1.2、分词器介绍"></a>1.2、分词器介绍</h3><p>ElasticSeach默认分词器：keyword(精确)，standard(拆分)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;analyzer&quot;: &quot;keyword&quot;,</span><br><span class="line">&quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">&quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ik分词器(需要引入插件)：ik_smart (粗粒度)和 ik_max_word(细粒度)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">&quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">&quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">&quot;text&quot;: &quot;我是中国人&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建议：索引时用ik_max_word尽可能多的分词，而搜索时用ik_smart尽可能提高匹配准度</strong></p><p><strong>扩展：自定义分词器词典</strong></p><p>**在ik分词器config目录下添加自定义词典，修改配置文件 IKAnalyzer.cfg.xml **</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="line">&lt;entry key&#x3D;&quot;ext_dict&quot;&gt;yu.dic&lt;&#x2F;entry&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3、Rest风格介绍"><a href="#1-3、Rest风格介绍" class="headerlink" title="1.3、Rest风格介绍"></a>1.3、Rest风格介绍</h3><p>ES推荐用户使用Restful风格</p><p>基本Rest命令说明：</p><table><thead><tr><th>method</th><th>url地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>创建文档（指定文档id）</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称</td><td>创建文档（随机文档id）</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/文档id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>查询文档通过文档id</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/_search</td><td>查询所有数据</td></tr></tbody></table><hr><h2 id="二、索引操作"><a href="#二、索引操作" class="headerlink" title="二、索引操作"></a>二、索引操作</h2><h3 id="2-1、创建索引"><a href="#2-1、创建索引" class="headerlink" title="2.1、创建索引"></a>2.1、创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT test</span><br></pre></td></tr></table></figure><h3 id="2-2、创建指定类型索引"><a href="#2-2、创建指定类型索引" class="headerlink" title="2.2、创建指定类型索引"></a>2.2、创建指定类型索引</h3><p>es的基本类型有：</p><ul><li>字符串类型<br>text 、 keyword</li><li>数值类型<br>long, integer, short, byte, double, float, half_float, scaled_float</li><li>日期类型<br>date</li><li>布尔值类型<br>boolean</li><li>二进制类型<br>binary  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT test2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;birthday&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、查询索引"><a href="#2-3、查询索引" class="headerlink" title="2.3、查询索引"></a>2.3、查询索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET test</span><br></pre></td></tr></table></figure><h3 id="2-4、删除索引"><a href="#2-4、删除索引" class="headerlink" title="2.4、删除索引"></a>2.4、删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE test</span><br></pre></td></tr></table></figure><hr><h2 id="三、文档操作"><a href="#三、文档操作" class="headerlink" title="三、文档操作"></a>三、文档操作</h2><h3 id="3-1、创建文档"><a href="#3-1、创建文档" class="headerlink" title="3.1、创建文档"></a>3.1、创建文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">POST yu&#x2F;user&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;小张&quot;,</span><br><span class="line">  &quot;age&quot;:3,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;帅&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST yu&#x2F;user&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">  &quot;age&quot;:20,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;帅&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST yu&#x2F;user&#x2F;3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;李四&quot;,</span><br><span class="line">  &quot;age&quot;:30,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;唱歌&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST yu&#x2F;user&#x2F;4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;王五&quot;,</span><br><span class="line">  &quot;age&quot;:40,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;跳舞&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、查询文档"><a href="#3-2、查询文档" class="headerlink" title="3.2、查询文档"></a>3.2、查询文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;1</span><br></pre></td></tr></table></figure><h3 id="3-3、修改文档"><a href="#3-3、修改文档" class="headerlink" title="3.3、修改文档"></a>3.3、修改文档</h3><p>修改一号用户年龄为5岁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#PUT修改</span><br><span class="line">PUT yu&#x2F;user&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;小张&quot;,</span><br><span class="line">  &quot;age&quot;:5,</span><br><span class="line">  &quot;tags&quot;:[&quot;技术宅&quot;,&quot;旅游&quot;,&quot;帅&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#POST修改</span><br><span class="line">POST yu&#x2F;user&#x2F;1&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;age&quot;:5</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PUT修改和POST修改区别：PUT会将json数据都进行替换, 而POST只会更新修改字段的值，POST更加灵活，一般推荐POST</strong></p><h3 id="3-4、删除文档"><a href="#3-4、删除文档" class="headerlink" title="3.4、删除文档"></a>3.4、删除文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE yu&#x2F;user&#x2F;1</span><br></pre></td></tr></table></figure><hr><p>**扩展： 通过GET _cat/ 可以获得es的当前的很多信息！ 通过GET _cat/indices命令 查看elasticsearch 索引情况！  **</p><hr><h3 id="3-5、复杂查询-重点"><a href="#3-5、复杂查询-重点" class="headerlink" title="3.5、复杂查询(重点)"></a>3.5、复杂查询(重点)</h3><h4 id="3-5-1-、条件匹配查询"><a href="#3-5-1-、条件匹配查询" class="headerlink" title="3.5.1 、条件匹配查询"></a>3.5.1 、条件匹配查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search?q&#x3D;name:张三</span><br><span class="line"></span><br><span class="line">#查询一个条件一个值去匹配</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#查询一个条件多个值去匹配</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三 李四&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-2、自定义查询输出结果"><a href="#3-5-2、自定义查询输出结果" class="headerlink" title="3.5.2、自定义查询输出结果"></a>3.5.2、自定义查询输出结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;age&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-3、排序"><a href="#3-5-3、排序" class="headerlink" title="3.5.3、排序"></a>3.5.3、排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-4、分页"><a href="#3-5-4、分页" class="headerlink" title="3.5.4、分页"></a>3.5.4、分页</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;, &quot;age&quot;],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-4、多条件匹配查询"><a href="#3-5-4、多条件匹配查询" class="headerlink" title="3.5.4、多条件匹配查询"></a>3.5.4、多条件匹配查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#and查询，must相当于and</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 5</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#or查询，should相当于or</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 30</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#not查询，must_not相当于not</span><br><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 30</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-5、过滤查询"><a href="#3-5-5、过滤查询" class="headerlink" title="3.5.5、过滤查询"></a>3.5.5、过滤查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 10,</span><br><span class="line">              &quot;lte&quot;: 20</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-6、精确查询-term"><a href="#3-5-6、精确查询-term" class="headerlink" title="3.5.6、精确查询(term)"></a>3.5.6、精确查询(term)</h4><p><strong>term 查询是直接通过倒排索引指定的词条进程精确查找的  !</strong></p><p><strong>text类型会被拆分，而keyword类型不会</strong></p><p> 准备数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#创建索引</span><br><span class="line">PUT termdb</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;birth&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#创建文档</span><br><span class="line">PUT termdb&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;小张&quot;,</span><br><span class="line">  &quot;birth&quot;:&quot;1997-09-14&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#创建文档</span><br><span class="line">PUT termdb&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;张三&quot;,</span><br><span class="line">  &quot;birth&quot;:&quot;1997-10-15&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#查询keyword类型的：只会查出来一条</span><br><span class="line">GET termdb&#x2F;_doc&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#查询text类型的：会查出来多条</span><br><span class="line">GET termdb&#x2F;_doc&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;birth&quot;: &quot;1997&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：当用term查询一个text类型时，term无法对其精确匹配的 ，查询条件缩小(值为：张三，查询条件：张)会分词查询</strong></p><h4 id="3-5-7、高亮查询"><a href="#3-5-7、高亮查询" class="headerlink" title="3.5.7、高亮查询"></a>3.5.7、高亮查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定制高亮属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET yu&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;:&#123;</span><br><span class="line">    &quot;pre_tags&quot;: &quot;&lt;p style&#x3D;&#39;color:red&#39;&gt;&quot;,</span><br><span class="line">    &quot;post_tags&quot;: &quot;&lt;&#x2F;p&gt;&quot;, </span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、Springboot整合ElasticSearch"><a href="#四、Springboot整合ElasticSearch" class="headerlink" title="四、Springboot整合ElasticSearch"></a>四、Springboot整合ElasticSearch</h2><p>可参考elasticSearch官网：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html</a></p><h3 id="4-1、添加依赖"><a href="#4-1、添加依赖" class="headerlink" title="4.1、添加依赖"></a>4.1、添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>若es本地版本和springboot默认es版本不一致，需要自定义版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;!--自定义elasticSearch版本--&gt;</span><br><span class="line">&lt;elasticsearch.version&gt;7.12.0&lt;&#x2F;elasticsearch.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2、注册RestHighLevelClient-对象"><a href="#4-2、注册RestHighLevelClient-对象" class="headerlink" title="4.2、注册RestHighLevelClient 对象"></a>4.2、注册RestHighLevelClient 对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ElasticSearchConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RestHighLevelClient restHighLevelClient() &#123;</span><br><span class="line">        RestHighLevelClient client &#x3D; new RestHighLevelClient(</span><br><span class="line">                RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));</span><br><span class="line">        return client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3、RestHighLevelClient对象操作索引"><a href="#4-3、RestHighLevelClient对象操作索引" class="headerlink" title="4.3、RestHighLevelClient对象操作索引"></a>4.3、RestHighLevelClient对象操作索引</h3><p>先注入RestHighLevelClient对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">RestHighLevelClient restHighLevelClient;</span><br></pre></td></tr></table></figure><h4 id="4-3-1、创建索引"><a href="#4-3-1、创建索引" class="headerlink" title="4.3.1、创建索引"></a>4.3.1、创建索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void createIndices() throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F;创建索引请求</span><br><span class="line">    CreateIndexRequest createIndexRequest &#x3D; new CreateIndexRequest(&quot;java_indices&quot;);</span><br><span class="line">    &#x2F;&#x2F;客户端执行请求</span><br><span class="line">    CreateIndexResponse response &#x3D; restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2、查询索引"><a href="#4-3-2、查询索引" class="headerlink" title="4.3.2、查询索引"></a>4.3.2、查询索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判断索引是否存在</span><br><span class="line">@Test</span><br><span class="line">void isExistIndices() throws IOException &#123;</span><br><span class="line">    GetIndexRequest getIndexRequest &#x3D; new GetIndexRequest(&quot;java_indices&quot;);</span><br><span class="line">    boolean exists &#x3D; restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3、删除索引"><a href="#4-3-3、删除索引" class="headerlink" title="4.3.3、删除索引"></a>4.3.3、删除索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void deleteIndices() throws IOException &#123;</span><br><span class="line">    DeleteIndexRequest deleteIndexRequest &#x3D; new DeleteIndexRequest(&quot;java_indices&quot;);</span><br><span class="line">    AcknowledgedResponse acknowledgedResponse &#x3D; restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(acknowledgedResponse.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-4、RestHighLevelClient对象操作文档"><a href="#4-4、RestHighLevelClient对象操作文档" class="headerlink" title="4.4、RestHighLevelClient对象操作文档"></a>4.4、RestHighLevelClient对象操作文档</h3><h4 id="4-4-1、创建文档"><a href="#4-4-1、创建文档" class="headerlink" title="4.4.1、创建文档"></a>4.4.1、创建文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void createDocument() throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F;创建请求并指定索引</span><br><span class="line">    IndexRequest request &#x3D; new IndexRequest(&quot;java_indices&quot;);</span><br><span class="line">    request.id(&quot;1&quot;); &#x2F;&#x2F; 设置ID</span><br><span class="line">    request.timeout(&quot;1s&quot;); &#x2F;&#x2F; 设置超时时间</span><br><span class="line">    request.source(JSON.toJSONString(new User(&quot;张三&quot;, 20)), XContentType.JSON); &#x2F;&#x2F;设置数据</span><br><span class="line">    &#x2F;&#x2F;客户端发送请求</span><br><span class="line">    IndexResponse response &#x3D; restHighLevelClient.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2、查询文档"><a href="#4-4-2、查询文档" class="headerlink" title="4.4.2、查询文档"></a>4.4.2、查询文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;根据ID获取指定索引的文档信息，判断是否存在</span><br><span class="line">@Test</span><br><span class="line">void getDocument() throws IOException &#123;</span><br><span class="line">    GetRequest request &#x3D; new GetRequest(&quot;java_indices&quot;, &quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F;request.id(&quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F;判断指定的索引和id是否存在</span><br><span class="line">    boolean exists &#x3D; restHighLevelClient.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(exists);</span><br><span class="line">    &#x2F;&#x2F;获取指定的id信息</span><br><span class="line">    GetResponse response &#x3D; restHighLevelClient.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.getSourceAsString());</span><br><span class="line">    &#x2F;&#x2F;System.out.println(response.isExists());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-3、更新文档"><a href="#4-4-3、更新文档" class="headerlink" title="4.4.3、更新文档"></a>4.4.3、更新文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;更新文档(Update)，重新插入同一个id的数据也是更新(PUT操作)</span><br><span class="line">@Test</span><br><span class="line">void updateDocument() throws IOException &#123;</span><br><span class="line">    UpdateRequest request &#x3D; new UpdateRequest(&quot;java_indices&quot;, &quot;1&quot;);</span><br><span class="line">    request.timeout(&quot;1s&quot;);</span><br><span class="line">    &#x2F;&#x2F;封装需要更新的文档信息</span><br><span class="line">    request.doc(JSON.toJSONString(new User(&quot;小张&quot;, 10)), XContentType.JSON);</span><br><span class="line">    UpdateResponse response &#x3D; restHighLevelClient.update(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-4、删除文档"><a href="#4-4-4、删除文档" class="headerlink" title="4.4.4、删除文档"></a>4.4.4、删除文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void deleteDocument() throws IOException &#123;</span><br><span class="line">    DeleteRequest request &#x3D; new DeleteRequest(&quot;java_indices&quot;, &quot;1&quot;);</span><br><span class="line">    request.timeout(&quot;1s&quot;);</span><br><span class="line">    DeleteResponse response &#x3D; restHighLevelClient.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-5、批量插入文档"><a href="#4-4-5、批量插入文档" class="headerlink" title="4.4.5、批量插入文档"></a>4.4.5、批量插入文档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void batchCreateDocument() throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F;创建批量的请求</span><br><span class="line">    BulkRequest bulkRequest &#x3D; new BulkRequest();</span><br><span class="line">    bulkRequest.timeout(&quot;10s&quot;);</span><br><span class="line">    List&lt;User&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">        User user &#x3D; new User(&quot;张三&quot; + i, 20 + i);</span><br><span class="line">        list.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;遍历list，把多条数据放到BulkRequest中</span><br><span class="line">    for (int i &#x3D; 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">        IndexRequest indexRequest &#x3D; new IndexRequest(&quot;java_indices&quot;);</span><br><span class="line">        indexRequest.id(&quot;&quot; + i);</span><br><span class="line">        indexRequest.source(JSON.toJSONString(list.get(i)), XContentType.JSON);</span><br><span class="line">        bulkRequest.add(indexRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;客户端执行批量操作</span><br><span class="line">    BulkResponse responses &#x3D; restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(responses.hasFailures()); &#x2F;&#x2F;是否失败，如果false则表示全部成功</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-6、文档复杂查询和高亮"><a href="#4-4-6、文档复杂查询和高亮" class="headerlink" title="4.4.6、文档复杂查询和高亮"></a>4.4.6、文档复杂查询和高亮</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">void searchDocument() throws IOException &#123;</span><br><span class="line">    &#x2F;&#x2F;创建批量搜索请求</span><br><span class="line">    SearchRequest request &#x3D; new SearchRequest(&quot;java_indices&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;构建搜索条件</span><br><span class="line">    SearchSourceBuilder searchSourceBuilder &#x3D; new SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查询条件，可以通过 QueryBuilders 工具来实现</span><br><span class="line">    &#x2F;&#x2F;当中文查询时，如果使用ik分词器会查询不到数据，属性需要使用xxx.keyword才能查询到数据</span><br><span class="line">    &#x2F;&#x2F;TermQueryBuilder termQuery &#x3D; QueryBuilders.termQuery(&quot;name.keyword&quot;, &quot;张三1&quot;);&#x2F;&#x2F;精确查询</span><br><span class="line">    MatchQueryBuilder matchQuery &#x3D; QueryBuilders.matchQuery(&quot;name&quot;, &quot;张三&quot;); &#x2F;&#x2F;模糊查询</span><br><span class="line">    &#x2F;&#x2F;BoolQueryBuilder boolQuery &#x3D; QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(&quot;name&quot;, &quot;张三&quot;)); &#x2F;&#x2F;多条件查询</span><br><span class="line"></span><br><span class="line">    searchSourceBuilder.query(matchQuery); &#x2F;&#x2F;查询</span><br><span class="line">    searchSourceBuilder.sort(&quot;age&quot;, SortOrder.ASC); &#x2F;&#x2F;排序</span><br><span class="line">    searchSourceBuilder.from(0); &#x2F;&#x2F;分页起始</span><br><span class="line">    searchSourceBuilder.size(5); &#x2F;&#x2F;分页一页显示的数量</span><br><span class="line">    searchSourceBuilder.timeout(TimeValue.timeValueSeconds(1)); &#x2F;&#x2F;设置超时时间</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建高亮生成器</span><br><span class="line">    HighlightBuilder highlightBuilder &#x3D; new HighlightBuilder();</span><br><span class="line">    highlightBuilder.field(&quot;name&quot;);</span><br><span class="line">    highlightBuilder.preTags(&quot;&lt;p style&#x3D;&#39;color:red&#39;&gt;&quot;);</span><br><span class="line">    highlightBuilder.postTags(&quot;&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">    &#x2F;&#x2F;设置高亮</span><br><span class="line">    searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;将查询条件放入搜索请求request中</span><br><span class="line">    request.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;客户端执行请求</span><br><span class="line">    SearchResponse response &#x3D; restHighLevelClient.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(JSON.toJSONString(response.getHits()));</span><br><span class="line">    &#x2F;&#x2F;遍历Hits</span><br><span class="line">    for (SearchHit hit : response.getHits()) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticSearch基本操作&quot;&gt;&lt;a href=&quot;#ElasticSearch基本操作&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch基本操作&quot;&gt;&lt;/a&gt;ElasticSearch基本操作&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JSON对象转化</title>
    <link href="http://example.com/2021/03/10/JSON%E5%AF%B9%E8%B1%A1%E8%BD%AC%E5%8C%96/"/>
    <id>http://example.com/2021/03/10/JSON%E5%AF%B9%E8%B1%A1%E8%BD%AC%E5%8C%96/</id>
    <published>2021-03-10T14:10:23.000Z</published>
    <updated>2021-04-16T14:07:30.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON对象转化"><a href="#JSON对象转化" class="headerlink" title="JSON对象转化"></a>JSON对象转化</h1><hr><p>在JSON对象转化问题，一般用的较多的是Jackson和fastjson</p><h2 id="一：Jackson简单用法"><a href="#一：Jackson简单用法" class="headerlink" title="一：Jackson简单用法"></a>一：Jackson简单用法</h2><p>Jackson依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.12.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="1、对象转json"><a href="#1、对象转json" class="headerlink" title="1、对象转json"></a>1、对象转json</h3><p>第一步：创建Jackson的核心对象 ObjectMapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper &#x3D; new ObjectMapper();</span><br></pre></td></tr></table></figure><p>第二步：使用转换方法</p><p>常用的有：</p><p>1、writeValue(参数一，参数二)；</p><p>参数一：</p><p>　　(1) File：将obj对象转换为JSON字符串，并保存到指定的文件中</p><p>　　(2) Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中(通常可以使用respon的getWrite()方法，获取该类)</p><p>　　(3) OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</p><p>参数二：</p><p>　　要转换为JSON的对象　</p><p>2、**writeValueAsString(Object obj)**：将对象转为json字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user &#x3D; new User(&quot;张三&quot;, &quot;男&quot;, &quot;2000-01-01&quot;);</span><br><span class="line">String json &#x3D; mapper.writeValueAsString(user);</span><br></pre></td></tr></table></figure><h3 id="2、json转对象"><a href="#2、json转对象" class="headerlink" title="2、json转对象"></a>2、json转对象</h3><p><strong>readValue(参数一，参数二)</strong></p><p>参数一：从那读取对象</p><p>参数二：要转换为的对象：object类型　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper mapper &#x3D; new ObjectMapper();</span><br><span class="line">&#x2F;&#x2F;1.JSON字符串转对象</span><br><span class="line">String json &#x3D; &quot;&#123;\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;sex\&quot;:\&quot;男\&quot;,\&quot;birthday\&quot;:\&quot;2000-01-01\&quot;&#125;&quot;;</span><br><span class="line">User user &#x3D; mapper.readValue(json, User.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.json字符串转map</span><br><span class="line">Map map &#x3D; mapper.readValue(json, Map.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.从file中读取转对象</span><br><span class="line">File file &#x3D; new File(&quot;data&#x2F;user.json&quot;);</span><br><span class="line">User user &#x3D; mapper.readValue(file, user.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;4.从URL中读取转对象</span><br><span class="line">URL url &#x3D; new URL(&quot;file:data&#x2F;user.json&quot;);</span><br><span class="line">User user &#x3D; mapper.readValue(url, user.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;5.从InputStream读取转对象</span><br><span class="line">InputStream input &#x3D; new FileInputStream(&quot;data&#x2F;user.json&quot;);</span><br><span class="line">User user &#x3D; mapper.readValue(input, user.class);</span><br></pre></td></tr></table></figure><h3 id="3、JackSon的常用注解"><a href="#3、JackSon的常用注解" class="headerlink" title="3、JackSon的常用注解"></a>3、JackSon的常用注解</h3><p>JackSon提供了一些的注解，可以用在类上或者是在字段上。通常是数据绑定的时候使用。下面几个是最常用的几个</p><p><strong>@JsonInclude(JsonInclude.Include.NON_EMPTY)</strong></p><p>仅在属性不为空时序列化此字段，对于字符串，即null或空字符串</p><p><strong>@JsonIgnore</strong></p><p>在json序列化时将java bean中的一些属性忽略掉，序列化和反序列化都受影响，一般标记在属性或者方法上</p><p><strong>@JsonProperty(value = “user_name”)</strong></p><p>指定序列化时的字段名(把属性的名称序列化成另外一个名称)，默认使用属性名，一般作用于属性上</p><h2 id="二：fastJson简单用法"><a href="#二：fastJson简单用法" class="headerlink" title="二：fastJson简单用法"></a>二：fastJson简单用法</h2><p>fastjson依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.75&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>fastJson源码中可以发现主要的3个类，JSON,JSONArray，JSONObject</p><p>三者之间的关系是：<strong>JSONObject和JSONArray继承JSON</strong>，</p><p>JSONObject相当于Map，JSONObject的数据是用 {  } 来表示的</p><p>JSONArray相当于List，是由JSONObject构成的数组，用  [ { } , { } , ……  , { } ]  来表示</p><h3 id="1、json字符串与对象之间的转换"><a href="#1、json字符串与对象之间的转换" class="headerlink" title="1、json字符串与对象之间的转换"></a>1、json字符串与对象之间的转换</h3><p>主要方法是 <strong>JSON.toJSONString</strong> 和 <strong>JSON.parseObject</strong></p><ul><li>序列化:<br>String jsonString = JSON.toJSONString(obj);</li><li>反序列化:<br>VO vo = JSON.parseObject(“jsonString”, VO.class);</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对象转字符串</span><br><span class="line">User user &#x3D; new User(&quot;张三&quot;, &quot;男&quot;, &quot;2000-01-01&quot;);</span><br><span class="line">String jsonString &#x3D; JSON.toJSONString(user);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串转对象</span><br><span class="line">User user &#x3D; JSON.parseObject(jsonString, User.class);</span><br></pre></td></tr></table></figure><h3 id="2、json数组字符串与对象数组之间的转换"><a href="#2、json数组字符串与对象数组之间的转换" class="headerlink" title="2、json数组字符串与对象数组之间的转换"></a>2、json数组字符串与对象数组之间的转换</h3><p>主要方法是 <strong>JSON.toJSONString</strong> 和 <strong>JSON.parseArray</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建对象集合</span><br><span class="line">List&lt;User&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">for (int i &#x3D; 1; i &lt;&#x3D; 5; i++) &#123;</span><br><span class="line">list.add(new User(&quot;张三&quot;+ i +&quot;号&quot;, &quot;男&quot;, &quot;2000-01-01&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;list转json</span><br><span class="line">String jsonString &#x3D; JSONObject.toJSONString(list);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;json数组字符串转对象集合</span><br><span class="line">List&lt;User&gt; users &#x3D; JSONObject.parseArray(jsonString, User.class);</span><br></pre></td></tr></table></figure><h3 id="3、获取json字符串中的某个字段"><a href="#3、获取json字符串中的某个字段" class="headerlink" title="3、获取json字符串中的某个字段"></a>3、获取json字符串中的某个字段</h3><p>需要先转化为 <strong>JSONObject</strong> 对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;对象转JSONObject对象</span><br><span class="line">User user &#x3D; new User(&quot;张三&quot;, &quot;男&quot;, &quot;2000-01-01&quot;);</span><br><span class="line">JSONObject jsonObject &#x3D; (JSONObject) JSON.toJSON(user);</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">JSONObject jsonObject &#x3D; (JSONObject) JSONObject.toJSON(user);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;字符串转JSONObject对象</span><br><span class="line">String json &#x3D; &quot;&#123;\&quot;birthday\&quot;:\&quot;2000-01-01\&quot;,\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;sex\&quot;:\&quot;男\&quot;,\&quot;grade\&quot;:80&#125;&quot;;</span><br><span class="line">JSONObject jsonObject &#x3D; JSON.parseObject(json);</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">JSONObject jsonObject &#x3D; JSONObject.parseObject(json);</span><br></pre></td></tr></table></figure><p>再使用 <strong>JSONObject</strong> 对象的一系列 <strong>get</strong> 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name &#x3D; jsonObject.getString(&quot;name&quot;);</span><br><span class="line">Integer grade &#x3D; jsonObject.getInteger(&quot;grade&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSON对象转化&quot;&gt;&lt;a href=&quot;#JSON对象转化&quot; class=&quot;headerlink&quot; title=&quot;JSON对象转化&quot;&gt;&lt;/a&gt;JSON对象转化&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;在JSON对象转化问题，一般用的较多的是Jackson和fastjson&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="http://example.com/2021/01/01/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2021/01/01/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</id>
    <published>2021-01-01T08:00:00.000Z</published>
    <updated>2021-01-01T08:58:43.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown常用语法"><a href="#Markdown常用语法" class="headerlink" title="Markdown常用语法"></a>Markdown常用语法</h1><hr><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><h3 id="1-使用-表示标题，其中-号必须在行首，中间必须一个空格，-个数表示是几级标题，例如："><a href="#1-使用-表示标题，其中-号必须在行首，中间必须一个空格，-个数表示是几级标题，例如：" class="headerlink" title="1. 使用 # 表示标题，其中 # 号必须在行首，中间必须一个空格，#个数表示是几级标题，例如："></a>1. 使用 <code>#</code> 表示标题，其中 <code>#</code> 号必须在行首，中间必须一个空格，<code>#</code>个数表示是几级标题，例如：</h3><h1 id="一号标题"><a href="#一号标题" class="headerlink" title="一号标题"></a>一号标题</h1><h2 id="二号标题"><a href="#二号标题" class="headerlink" title="二号标题"></a>二号标题</h2><h3 id="三号标题"><a href="#三号标题" class="headerlink" title="三号标题"></a>三号标题</h3><h4 id="四号标题"><a href="#四号标题" class="headerlink" title="四号标题"></a>四号标题</h4><h5 id="五号标题"><a href="#五号标题" class="headerlink" title="五号标题"></a>五号标题</h5><h6 id="六号标题"><a href="#六号标题" class="headerlink" title="六号标题"></a>六号标题</h6><h3 id="2-在字段下一行输入-表示一级标题，-表示二级标题，例如："><a href="#2-在字段下一行输入-表示一级标题，-表示二级标题，例如：" class="headerlink" title="2. 在字段下一行输入=== 表示一级标题，--- 表示二级标题，例如："></a>2. 在字段下一行输入<code>===</code> 表示一级标题，<code>---</code> 表示二级标题，例如：</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="扩展：分割线"><a href="#扩展：分割线" class="headerlink" title="扩展：分割线"></a>扩展：分割线</h3><p>使用三个或以上的 <code>-</code> 或者 <code>*</code> 表示，且这一行只有符号，<strong>注意不要被识别为二级标题即可</strong>，例如中间或者前面可以加空格</p><hr><hr><h2 id="二、斜体和粗体"><a href="#二、斜体和粗体" class="headerlink" title="二、斜体和粗体"></a>二、斜体和粗体</h2><p>使用 <code>*</code> 和 <code>**</code> 分别表示斜体和粗体，例如</p><p><em>斜体</em> <strong>粗体</strong> <strong><em>又斜又粗</em></strong></p><h4 id="扩展：删除线使用两个-表示，例如"><a href="#扩展：删除线使用两个-表示，例如" class="headerlink" title="扩展：删除线使用两个 ~ 表示，例如"></a><strong>扩展：</strong>删除线使用两个 <code>~</code> 表示，例如</h4><p><del>我是要删掉的文字</del></p><hr><h2 id="三、超链接和图片"><a href="#三、超链接和图片" class="headerlink" title="三、超链接和图片"></a>三、超链接和图片</h2><p>超链接和图片的写法类似，图片仅在超链接前多了一个 <code>!</code> ，超链接是 [文字描述] (链接)，图片是![文字描述] (图片路径)，如：</p><p>超链接：<a href="www.baidu.com">百度</a></p><p>图片：<img src="//www.baidu.com/img/2020dong_36ab26b0975e2a69e81f707084a9e7e8.gif"></p><hr><h2 id="四、行内代码块"><a href="#四、行内代码块" class="headerlink" title="四、行内代码块"></a>四、行内代码块</h2><p>其实上面已经用过很多次了，即使用 ``` 表示，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">行内代码块</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        System.out.println( <span class="string">&quot;Hello, World!&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意：很多字符是需要转义，使用反斜杠-进行转义"><a href="#注意：很多字符是需要转义，使用反斜杠-进行转义" class="headerlink" title="注意：很多字符是需要转义，使用反斜杠 \ 进行转义"></a>注意：很多字符是需要转义，使用反斜杠 <code>\</code> 进行转义</h3><hr><h2 id="五、无序列表"><a href="#五、无序列表" class="headerlink" title="五、无序列表"></a>五、无序列表</h2><p>使用 <code>-</code>、<code>+</code> 和 <code>*</code> (后面有个空格) 表示无序列表，前后留一行空白，可嵌套，例如</p><p>无序列表</p><ul><li>一层<ul><li>二层</li><li>二层<ul><li>三层<ul><li>四层</li></ul></li></ul></li></ul></li><li>一层</li></ul><hr><h2 id="六、有序列表"><a href="#六、有序列表" class="headerlink" title="六、有序列表"></a>六、有序列表</h2><p>使用 <code>数字. </code>（点号后面有个空格）表示有序列表，可嵌套，例如</p><p>有序列表</p><ol><li>一层<ol><li>二层</li><li>二层</li></ol></li><li>一层</li></ol><hr><h2 id="七、文字引用"><a href="#七、文字引用" class="headerlink" title="七、文字引用"></a>七、文字引用</h2><p>使用 <code>&gt;</code> (后面有个空格) 表示，可以有多个 <code>&gt;</code>，表示层级更深，例如</p><blockquote><p>第一层</p><blockquote><p>第二层 这样是跳不出去的</p><blockquote><p>还可以更深</p></blockquote></blockquote></blockquote><blockquote><p>这样就跳出去了</p></blockquote><hr><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>直接看例子吧，第二行的 <code>---:</code> 表示了对齐方式，默认<strong>左对齐</strong>，还有<strong>右对齐</strong>和<strong>居中</strong></p><table><thead><tr><th>商品</th><th>数量</th><th>单价</th></tr></thead><tbody><tr><td>手机</td><td>1</td><td>$1000</td></tr><tr><td>电脑</td><td>1</td><td>$1999</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown常用语法&quot;&gt;&lt;a href=&quot;#Markdown常用语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown常用语法&quot;&gt;&lt;/a&gt;Markdown常用语法&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo搭建</title>
    <link href="http://example.com/2020/12/30/hexo%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2020/12/30/hexo%E6%90%AD%E5%BB%BA/</id>
    <published>2020-12-29T16:02:17.000Z</published>
    <updated>2020-12-30T12:00:19.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h3><hr><h4 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h4><p> 官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><h4 id="2、安装hexo"><a href="#2、安装hexo" class="headerlink" title="2、安装hexo"></a>2、安装hexo</h4><p>cmd输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="3、创建hexo项目"><a href="#3、创建hexo项目" class="headerlink" title="3、创建hexo项目"></a>3、创建hexo项目</h4><p>新建hexo文件夹，打开git bash，一步步输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">hexo init</span><br><span class="line">&#x2F;&#x2F;安装依赖</span><br><span class="line">npm install</span><br><span class="line">&#x2F;&#x2F;生成文件</span><br><span class="line">hexo g</span><br><span class="line">&#x2F;&#x2F;开启服务</span><br><span class="line">hexo s</span><br><span class="line">&#x2F;&#x2F;本地启动</span><br><span class="line">http:&#x2F;&#x2F;localhost:4000</span><br></pre></td></tr></table></figure><h4 id="4、GitHub创建仓库"><a href="#4、GitHub创建仓库" class="headerlink" title="4、GitHub创建仓库"></a>4、GitHub创建仓库</h4><p>在github上创建一个和你用户名相同的仓库，<a href="http://后面加.github.io/">后面加.github.io</a></p><h4 id="5、将hexo部署到GitHub"><a href="#5、将hexo部署到GitHub" class="headerlink" title="5、将hexo部署到GitHub"></a>5、将hexo部署到GitHub</h4><p>打开项目根目录配置文件 <code>_config.yml</code>，翻到最后，修改为如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>需要先安装deploy-git部署命令，才可以用命令部署到GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo generate  或者  hexo g</span><br><span class="line">hexo deploy   或者  hexo d</span><br><span class="line">&#x2F;&#x2F;如果需要本地执行</span><br><span class="line">hexo server 或者 hexo s</span><br></pre></td></tr></table></figure><hr><h4 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h4><p>进入hexo文件夹，打开git bash输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 博客名称</span><br></pre></td></tr></table></figure><p>会在source文件中生成XXX.md，通过Typora打开编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>生成并发布</p><p>本地 ：<a href="http://localhost:4000/">http://localhost:4000</a></p><p>外网 ：https://你的github名字.github.io/</p><hr><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><p>用我的主题为例：butterfly</p><p>进入项目根目录，打开git bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><p>修改根目录配置文件_config.yml，把主题改为butterfly</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme:  butterfly</span><br></pre></td></tr></table></figure><p>遇到的问题：extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug </p><p>解决方法：执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;清除缓存</span><br><span class="line">hexo clean</span><br><span class="line">&#x2F;&#x2F;重新生成静态文件</span><br><span class="line">hexo g</span><br><span class="line">&#x2F;&#x2F;发布</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>完成！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Hexo搭建&quot;&gt;&lt;a href=&quot;#Hexo搭建&quot; class=&quot;headerlink&quot; title=&quot;Hexo搭建&quot;&gt;&lt;/a&gt;Hexo搭建&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;1、安装Node-js&quot;&gt;&lt;a href=&quot;#1、安装Node-js&quot; class=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git大全</title>
    <link href="http://example.com/2020/12/29/git%E5%A4%A7%E5%85%A8/"/>
    <id>http://example.com/2020/12/29/git%E5%A4%A7%E5%85%A8/</id>
    <published>2020-12-29T14:33:54.000Z</published>
    <updated>2020-12-29T14:41:15.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GIT命令使用大全"><a href="#GIT命令使用大全" class="headerlink" title="GIT命令使用大全"></a>GIT命令使用大全</h1><p>查看配置：git config -l</p><p>查看系统配置：git config –system –-list</p><p>查看当前用户（global）配置：git config –global  –list</p><p>配置账号：</p><p> git config –global user.name “your name”<br> git config –global user.email “<a href="mailto:&#121;&#x6f;&#117;&#114;&#95;&#101;&#109;&#x61;&#105;&#108;&#x40;&#x79;&#x6f;&#x75;&#x72;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#121;&#x6f;&#117;&#114;&#95;&#101;&#109;&#x61;&#105;&#108;&#x40;&#x79;&#x6f;&#x75;&#x72;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a>“</p><p>配置SSH：</p><p>1.如果没有SSH Key，则需要先生成一下：ssh-keygen -t rsa -C “注册github的邮箱”</p><p>2.执行之后继续执行以下命令来获取SSH Key：cd ~/.ssh</p><p>3.复制公钥在github中设置</p><p>4.验证：ssh -T <a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#103;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>     //运行结果出现类似如下Hi ygsit! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p><strong>提交代码：</strong></p><p>查看文件状态：git status</p><p>克隆：git clone url</p><p>git status                                 查看状态<br>git add .                               添加到暂存区<br>git commit -m “提交内容描述”                提交代码<br>git pull origin 分支名                      更新代码（当只有一个分支的时候可以直接git pull)<br>git push origin 分支名                   提交到远程（当只有一个分支的时候可以直接git push）</p><p>$ git reset [file]            还原暂存区的文件，并保存修改</p><p>$ git reset –hard        还原暂存区的文件，并把原来修改的删除</p><p>git commit –amend                                    修改提交的描述内容（vim修改）</p><p>git commit –amend -m “新提交信息”         直接修改提交描述内容</p><p>git reset –soft head^1      还原提交的文件，并保存修改</p><p>git reset –hard head^1     还原提交的文件，并把原来修改的删除</p><p><strong>git clone 和 git pull 区别：（clone拉取代码，pull更新代码）</strong></p><p>git clone：从远程服务器克隆一个一模一样的版本库到本地,复制的是整个版本库，叫做clone.（是将整个工程复制下来所以，不需要本地是仓库（没有.git文件夹））</p><p>git pull：从远程服务器获取到一个branch分支的更新到本地，并更新本地库，叫做pull.（本地有代码会更新，没有需要先初始化本地文件夹文一个仓库（git init））</p><p><strong>回退版本</strong>：</p><p>在一个分支中</p><p>git reset –soft head~1   回退并保存修改</p><p>git reset –hard head~1   回退不保存修改</p><p>1表示回退1个版本</p><p>2表示回退2个版本</p><p>回退到某个版本</p><p>git reset –soft 4e60fa983f23ff1ed5ec99f2c0cd4c4e4bf1e1d1（version code）</p><p>git reset –hard 4e60fa983f23ff1ed5ec99f2c0cd4c4e4bf1e1d1（version code）</p><p><strong>分支命令：</strong></p><p>查看所有本地分支：git branch </p><p>查看所有远程分支：git branch -r</p><p>查看所有本地分支和远程分支：git branch -a</p><p>创建分支：git branch 分支名  （复制当前分支到新创建的分支）</p><p>切换分支：git checkout 分支名</p><p>切换到上一个分支：git checkout -</p><p>创建并切换分支：git checkout -b 分支名 （相当于创建分支和切换分支的组合命令）</p><p>提交本地分支到远程仓库：git push origin 本地分支名</p><p>合并指定分支到当前分支：git merge 分支名</p><p>删除本地分支：git branch -d 本地分支名 （删除分支必须不在此分支下，删除本地分支后再切换到该删除的分支，会从远程拉取并自动创建本地分支）</p><p>删除远程分支：git push origin –delete 远程分支名</p><p><strong>冲突</strong>：</p><p>别人在更新代码 push冲突时  先pull一下</p><p>git pull 出现vi编辑时 按esc 跳到命令模式shift+ :wq!(保存强制退出) </p><p>如过merge成功 git界面无异常   否者需要解决冲突</p><p><strong>关联远程仓库</strong>：</p><p>git init</p><p>git add .</p><p>git commit -m “First commit”</p><p>git remote add origin 远程仓库路径(<a href="https://github.com/ygsit/test.git">https://github.com/ygsit/test.git</a>)</p><p>git push origin master或者git push -u origin master(加了-u，表示后面提交可以用git push代替git push origin master)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GIT命令使用大全&quot;&gt;&lt;a href=&quot;#GIT命令使用大全&quot; class=&quot;headerlink&quot; title=&quot;GIT命令使用大全&quot;&gt;&lt;/a&gt;GIT命令使用大全&lt;/h1&gt;&lt;p&gt;查看配置：git config -l&lt;/p&gt;
&lt;p&gt;查看系统配置：git confi</summary>
      
    
    
    
    
  </entry>
  
</feed>
